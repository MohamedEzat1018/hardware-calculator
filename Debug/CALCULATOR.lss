
CALCULATOR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002790  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00800060  00002790  00002804  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001e90  00000000  00000000  00002848  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000dd0  00000000  00000000  000046d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  000054a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  000055e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00005758  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  000073a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000828c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000903c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000919c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009429  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009bf7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e9       	ldi	r30, 0x90	; 144
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3a       	cpi	r26, 0xA2	; 162
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 4b 12 	call	0x2496	; 0x2496 <main>
      7a:	0c 94 c6 13 	jmp	0x278c	; 0x278c <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 8f 13 	jmp	0x271e	; 0x271e <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a9 e8       	ldi	r26, 0x89	; 137
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 ab 13 	jmp	0x2756	; 0x2756 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 9b 13 	jmp	0x2736	; 0x2736 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 b7 13 	jmp	0x276e	; 0x276e <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 9b 13 	jmp	0x2736	; 0x2736 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 b7 13 	jmp	0x276e	; 0x276e <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 8f 13 	jmp	0x271e	; 0x271e <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	89 e8       	ldi	r24, 0x89	; 137
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 ab 13 	jmp	0x2756	; 0x2756 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 9b 13 	jmp	0x2736	; 0x2736 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 b7 13 	jmp	0x276e	; 0x276e <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 9b 13 	jmp	0x2736	; 0x2736 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 b7 13 	jmp	0x276e	; 0x276e <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 9b 13 	jmp	0x2736	; 0x2736 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 b7 13 	jmp	0x276e	; 0x276e <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 9f 13 	jmp	0x273e	; 0x273e <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 bb 13 	jmp	0x2776	; 0x2776 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <CALC_u32GetResult>:
#include "CALC_interface.h"



u32 CALC_u32GetResult(u8* ptau8Operand1,u8* ptau8Operand2 , u8 u8Sign , u8 u8Op1NumOfDigits,u8 u8Op2NumOfDigits)
{
     b36:	0f 93       	push	r16
     b38:	df 93       	push	r29
     b3a:	cf 93       	push	r28
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
     b40:	6a 97       	sbiw	r28, 0x1a	; 26
     b42:	0f b6       	in	r0, 0x3f	; 63
     b44:	f8 94       	cli
     b46:	de bf       	out	0x3e, r29	; 62
     b48:	0f be       	out	0x3f, r0	; 63
     b4a:	cd bf       	out	0x3d, r28	; 61
     b4c:	9b 8b       	std	Y+19, r25	; 0x13
     b4e:	8a 8b       	std	Y+18, r24	; 0x12
     b50:	7d 8b       	std	Y+21, r23	; 0x15
     b52:	6c 8b       	std	Y+20, r22	; 0x14
     b54:	4e 8b       	std	Y+22, r20	; 0x16
     b56:	2f 8b       	std	Y+23, r18	; 0x17
     b58:	08 8f       	std	Y+24, r16	; 0x18
	u32 u32Result = 0;
     b5a:	1e 86       	std	Y+14, r1	; 0x0e
     b5c:	1f 86       	std	Y+15, r1	; 0x0f
     b5e:	18 8a       	std	Y+16, r1	; 0x10
     b60:	19 8a       	std	Y+17, r1	; 0x11
	u32 u32Operand1 = 0;
     b62:	1a 86       	std	Y+10, r1	; 0x0a
     b64:	1b 86       	std	Y+11, r1	; 0x0b
     b66:	1c 86       	std	Y+12, r1	; 0x0c
     b68:	1d 86       	std	Y+13, r1	; 0x0d
	u32 u32Operand2 = 0;
     b6a:	1e 82       	std	Y+6, r1	; 0x06
     b6c:	1f 82       	std	Y+7, r1	; 0x07
     b6e:	18 86       	std	Y+8, r1	; 0x08
     b70:	19 86       	std	Y+9, r1	; 0x09
	u32 u32multipicand;
	u8 u8Iterator;

	/* Convert Operand 1 From Array Of Character To Integer Number & Reset Operand 1 Array  */
	for(u8Iterator = ITERATOR_BGN ; u8Iterator < u8Op1NumOfDigits ; u8Iterator++)
     b72:	19 82       	std	Y+1, r1	; 0x01
     b74:	43 c0       	rjmp	.+134    	; 0xbfc <CALC_u32GetResult+0xc6>
	{
		u32multipicand = CALC_u32Power(BASE,(u8Op1NumOfDigits-u8Iterator-OFFSET));
     b76:	9f 89       	ldd	r25, Y+23	; 0x17
     b78:	89 81       	ldd	r24, Y+1	; 0x01
     b7a:	29 2f       	mov	r18, r25
     b7c:	28 1b       	sub	r18, r24
     b7e:	82 2f       	mov	r24, r18
     b80:	98 2f       	mov	r25, r24
     b82:	91 50       	subi	r25, 0x01	; 1
     b84:	8a e0       	ldi	r24, 0x0A	; 10
     b86:	69 2f       	mov	r22, r25
     b88:	0e 94 c4 06 	call	0xd88	; 0xd88 <CALC_u32Power>
     b8c:	dc 01       	movw	r26, r24
     b8e:	cb 01       	movw	r24, r22
     b90:	8a 83       	std	Y+2, r24	; 0x02
     b92:	9b 83       	std	Y+3, r25	; 0x03
     b94:	ac 83       	std	Y+4, r26	; 0x04
     b96:	bd 83       	std	Y+5, r27	; 0x05
		u32Operand1 += ((ptau8Operand1[u8Iterator]-'0') * u32multipicand);
     b98:	89 81       	ldd	r24, Y+1	; 0x01
     b9a:	28 2f       	mov	r18, r24
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	8a 89       	ldd	r24, Y+18	; 0x12
     ba0:	9b 89       	ldd	r25, Y+19	; 0x13
     ba2:	fc 01       	movw	r30, r24
     ba4:	e2 0f       	add	r30, r18
     ba6:	f3 1f       	adc	r31, r19
     ba8:	80 81       	ld	r24, Z
     baa:	88 2f       	mov	r24, r24
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	c0 97       	sbiw	r24, 0x30	; 48
     bb0:	aa 27       	eor	r26, r26
     bb2:	97 fd       	sbrc	r25, 7
     bb4:	a0 95       	com	r26
     bb6:	ba 2f       	mov	r27, r26
     bb8:	2a 81       	ldd	r18, Y+2	; 0x02
     bba:	3b 81       	ldd	r19, Y+3	; 0x03
     bbc:	4c 81       	ldd	r20, Y+4	; 0x04
     bbe:	5d 81       	ldd	r21, Y+5	; 0x05
     bc0:	bc 01       	movw	r22, r24
     bc2:	cd 01       	movw	r24, r26
     bc4:	0e 94 4e 13 	call	0x269c	; 0x269c <__mulsi3>
     bc8:	9b 01       	movw	r18, r22
     bca:	ac 01       	movw	r20, r24
     bcc:	8a 85       	ldd	r24, Y+10	; 0x0a
     bce:	9b 85       	ldd	r25, Y+11	; 0x0b
     bd0:	ac 85       	ldd	r26, Y+12	; 0x0c
     bd2:	bd 85       	ldd	r27, Y+13	; 0x0d
     bd4:	82 0f       	add	r24, r18
     bd6:	93 1f       	adc	r25, r19
     bd8:	a4 1f       	adc	r26, r20
     bda:	b5 1f       	adc	r27, r21
     bdc:	8a 87       	std	Y+10, r24	; 0x0a
     bde:	9b 87       	std	Y+11, r25	; 0x0b
     be0:	ac 87       	std	Y+12, r26	; 0x0c
     be2:	bd 87       	std	Y+13, r27	; 0x0d
		ptau8Operand1[u8Iterator] = RESET;
     be4:	89 81       	ldd	r24, Y+1	; 0x01
     be6:	28 2f       	mov	r18, r24
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	8a 89       	ldd	r24, Y+18	; 0x12
     bec:	9b 89       	ldd	r25, Y+19	; 0x13
     bee:	fc 01       	movw	r30, r24
     bf0:	e2 0f       	add	r30, r18
     bf2:	f3 1f       	adc	r31, r19
     bf4:	10 82       	st	Z, r1
	u32 u32Operand2 = 0;
	u32 u32multipicand;
	u8 u8Iterator;

	/* Convert Operand 1 From Array Of Character To Integer Number & Reset Operand 1 Array  */
	for(u8Iterator = ITERATOR_BGN ; u8Iterator < u8Op1NumOfDigits ; u8Iterator++)
     bf6:	89 81       	ldd	r24, Y+1	; 0x01
     bf8:	8f 5f       	subi	r24, 0xFF	; 255
     bfa:	89 83       	std	Y+1, r24	; 0x01
     bfc:	99 81       	ldd	r25, Y+1	; 0x01
     bfe:	8f 89       	ldd	r24, Y+23	; 0x17
     c00:	98 17       	cp	r25, r24
     c02:	08 f4       	brcc	.+2      	; 0xc06 <CALC_u32GetResult+0xd0>
     c04:	b8 cf       	rjmp	.-144    	; 0xb76 <CALC_u32GetResult+0x40>
		u32multipicand = CALC_u32Power(BASE,(u8Op1NumOfDigits-u8Iterator-OFFSET));
		u32Operand1 += ((ptau8Operand1[u8Iterator]-'0') * u32multipicand);
		ptau8Operand1[u8Iterator] = RESET;
	}
	/* Convert Operand 2 From Array Of Character To Integer Number & Reset Operand 2 Array  */
	for(u8Iterator = ITERATOR_BGN ; u8Iterator < u8Op2NumOfDigits ; u8Iterator++)
     c06:	19 82       	std	Y+1, r1	; 0x01
     c08:	43 c0       	rjmp	.+134    	; 0xc90 <CALC_u32GetResult+0x15a>
	{
		u32multipicand = CALC_u32Power(BASE,(u8Op2NumOfDigits-u8Iterator-OFFSET));
     c0a:	98 8d       	ldd	r25, Y+24	; 0x18
     c0c:	89 81       	ldd	r24, Y+1	; 0x01
     c0e:	39 2f       	mov	r19, r25
     c10:	38 1b       	sub	r19, r24
     c12:	83 2f       	mov	r24, r19
     c14:	98 2f       	mov	r25, r24
     c16:	91 50       	subi	r25, 0x01	; 1
     c18:	8a e0       	ldi	r24, 0x0A	; 10
     c1a:	69 2f       	mov	r22, r25
     c1c:	0e 94 c4 06 	call	0xd88	; 0xd88 <CALC_u32Power>
     c20:	dc 01       	movw	r26, r24
     c22:	cb 01       	movw	r24, r22
     c24:	8a 83       	std	Y+2, r24	; 0x02
     c26:	9b 83       	std	Y+3, r25	; 0x03
     c28:	ac 83       	std	Y+4, r26	; 0x04
     c2a:	bd 83       	std	Y+5, r27	; 0x05
		u32Operand2 += ((ptau8Operand2[u8Iterator]-'0') * u32multipicand);
     c2c:	89 81       	ldd	r24, Y+1	; 0x01
     c2e:	28 2f       	mov	r18, r24
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	8c 89       	ldd	r24, Y+20	; 0x14
     c34:	9d 89       	ldd	r25, Y+21	; 0x15
     c36:	fc 01       	movw	r30, r24
     c38:	e2 0f       	add	r30, r18
     c3a:	f3 1f       	adc	r31, r19
     c3c:	80 81       	ld	r24, Z
     c3e:	88 2f       	mov	r24, r24
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	c0 97       	sbiw	r24, 0x30	; 48
     c44:	aa 27       	eor	r26, r26
     c46:	97 fd       	sbrc	r25, 7
     c48:	a0 95       	com	r26
     c4a:	ba 2f       	mov	r27, r26
     c4c:	2a 81       	ldd	r18, Y+2	; 0x02
     c4e:	3b 81       	ldd	r19, Y+3	; 0x03
     c50:	4c 81       	ldd	r20, Y+4	; 0x04
     c52:	5d 81       	ldd	r21, Y+5	; 0x05
     c54:	bc 01       	movw	r22, r24
     c56:	cd 01       	movw	r24, r26
     c58:	0e 94 4e 13 	call	0x269c	; 0x269c <__mulsi3>
     c5c:	9b 01       	movw	r18, r22
     c5e:	ac 01       	movw	r20, r24
     c60:	8e 81       	ldd	r24, Y+6	; 0x06
     c62:	9f 81       	ldd	r25, Y+7	; 0x07
     c64:	a8 85       	ldd	r26, Y+8	; 0x08
     c66:	b9 85       	ldd	r27, Y+9	; 0x09
     c68:	82 0f       	add	r24, r18
     c6a:	93 1f       	adc	r25, r19
     c6c:	a4 1f       	adc	r26, r20
     c6e:	b5 1f       	adc	r27, r21
     c70:	8e 83       	std	Y+6, r24	; 0x06
     c72:	9f 83       	std	Y+7, r25	; 0x07
     c74:	a8 87       	std	Y+8, r26	; 0x08
     c76:	b9 87       	std	Y+9, r27	; 0x09
		ptau8Operand2[u8Iterator] = RESET;
     c78:	89 81       	ldd	r24, Y+1	; 0x01
     c7a:	28 2f       	mov	r18, r24
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	8c 89       	ldd	r24, Y+20	; 0x14
     c80:	9d 89       	ldd	r25, Y+21	; 0x15
     c82:	fc 01       	movw	r30, r24
     c84:	e2 0f       	add	r30, r18
     c86:	f3 1f       	adc	r31, r19
     c88:	10 82       	st	Z, r1
		u32multipicand = CALC_u32Power(BASE,(u8Op1NumOfDigits-u8Iterator-OFFSET));
		u32Operand1 += ((ptau8Operand1[u8Iterator]-'0') * u32multipicand);
		ptau8Operand1[u8Iterator] = RESET;
	}
	/* Convert Operand 2 From Array Of Character To Integer Number & Reset Operand 2 Array  */
	for(u8Iterator = ITERATOR_BGN ; u8Iterator < u8Op2NumOfDigits ; u8Iterator++)
     c8a:	89 81       	ldd	r24, Y+1	; 0x01
     c8c:	8f 5f       	subi	r24, 0xFF	; 255
     c8e:	89 83       	std	Y+1, r24	; 0x01
     c90:	99 81       	ldd	r25, Y+1	; 0x01
     c92:	88 8d       	ldd	r24, Y+24	; 0x18
     c94:	98 17       	cp	r25, r24
     c96:	08 f4       	brcc	.+2      	; 0xc9a <CALC_u32GetResult+0x164>
     c98:	b8 cf       	rjmp	.-144    	; 0xc0a <CALC_u32GetResult+0xd4>
		u32multipicand = CALC_u32Power(BASE,(u8Op2NumOfDigits-u8Iterator-OFFSET));
		u32Operand2 += ((ptau8Operand2[u8Iterator]-'0') * u32multipicand);
		ptau8Operand2[u8Iterator] = RESET;
	}
	/* Get Operation For Operand 1 & Operand 2 Result */
	switch(u8Sign)
     c9a:	8e 89       	ldd	r24, Y+22	; 0x16
     c9c:	28 2f       	mov	r18, r24
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	3a 8f       	std	Y+26, r19	; 0x1a
     ca2:	29 8f       	std	Y+25, r18	; 0x19
     ca4:	89 8d       	ldd	r24, Y+25	; 0x19
     ca6:	9a 8d       	ldd	r25, Y+26	; 0x1a
     ca8:	8f 32       	cpi	r24, 0x2F	; 47
     caa:	91 05       	cpc	r25, r1
     cac:	39 f1       	breq	.+78     	; 0xcfc <CALC_u32GetResult+0x1c6>
     cae:	29 8d       	ldd	r18, Y+25	; 0x19
     cb0:	3a 8d       	ldd	r19, Y+26	; 0x1a
     cb2:	20 33       	cpi	r18, 0x30	; 48
     cb4:	31 05       	cpc	r19, r1
     cb6:	5c f4       	brge	.+22     	; 0xcce <CALC_u32GetResult+0x198>
     cb8:	89 8d       	ldd	r24, Y+25	; 0x19
     cba:	9a 8d       	ldd	r25, Y+26	; 0x1a
     cbc:	8b 32       	cpi	r24, 0x2B	; 43
     cbe:	91 05       	cpc	r25, r1
     cc0:	61 f0       	breq	.+24     	; 0xcda <CALC_u32GetResult+0x1a4>
     cc2:	29 8d       	ldd	r18, Y+25	; 0x19
     cc4:	3a 8d       	ldd	r19, Y+26	; 0x1a
     cc6:	2d 32       	cpi	r18, 0x2D	; 45
     cc8:	31 05       	cpc	r19, r1
     cca:	59 f1       	breq	.+86     	; 0xd22 <CALC_u32GetResult+0x1ec>
     ccc:	4d c0       	rjmp	.+154    	; 0xd68 <CALC_u32GetResult+0x232>
     cce:	89 8d       	ldd	r24, Y+25	; 0x19
     cd0:	9a 8d       	ldd	r25, Y+26	; 0x1a
     cd2:	88 37       	cpi	r24, 0x78	; 120
     cd4:	91 05       	cpc	r25, r1
     cd6:	b1 f1       	breq	.+108    	; 0xd44 <CALC_u32GetResult+0x20e>
     cd8:	47 c0       	rjmp	.+142    	; 0xd68 <CALC_u32GetResult+0x232>
	{
		case '+': u32Result = u32Operand1 + u32Operand2 ; break;
     cda:	8a 85       	ldd	r24, Y+10	; 0x0a
     cdc:	9b 85       	ldd	r25, Y+11	; 0x0b
     cde:	ac 85       	ldd	r26, Y+12	; 0x0c
     ce0:	bd 85       	ldd	r27, Y+13	; 0x0d
     ce2:	2e 81       	ldd	r18, Y+6	; 0x06
     ce4:	3f 81       	ldd	r19, Y+7	; 0x07
     ce6:	48 85       	ldd	r20, Y+8	; 0x08
     ce8:	59 85       	ldd	r21, Y+9	; 0x09
     cea:	82 0f       	add	r24, r18
     cec:	93 1f       	adc	r25, r19
     cee:	a4 1f       	adc	r26, r20
     cf0:	b5 1f       	adc	r27, r21
     cf2:	8e 87       	std	Y+14, r24	; 0x0e
     cf4:	9f 87       	std	Y+15, r25	; 0x0f
     cf6:	a8 8b       	std	Y+16, r26	; 0x10
     cf8:	b9 8b       	std	Y+17, r27	; 0x11
     cfa:	36 c0       	rjmp	.+108    	; 0xd68 <CALC_u32GetResult+0x232>
		case '/': u32Result = u32Operand1 / u32Operand2 ; break;
     cfc:	8a 85       	ldd	r24, Y+10	; 0x0a
     cfe:	9b 85       	ldd	r25, Y+11	; 0x0b
     d00:	ac 85       	ldd	r26, Y+12	; 0x0c
     d02:	bd 85       	ldd	r27, Y+13	; 0x0d
     d04:	2e 81       	ldd	r18, Y+6	; 0x06
     d06:	3f 81       	ldd	r19, Y+7	; 0x07
     d08:	48 85       	ldd	r20, Y+8	; 0x08
     d0a:	59 85       	ldd	r21, Y+9	; 0x09
     d0c:	bc 01       	movw	r22, r24
     d0e:	cd 01       	movw	r24, r26
     d10:	0e 94 6d 13 	call	0x26da	; 0x26da <__udivmodsi4>
     d14:	da 01       	movw	r26, r20
     d16:	c9 01       	movw	r24, r18
     d18:	8e 87       	std	Y+14, r24	; 0x0e
     d1a:	9f 87       	std	Y+15, r25	; 0x0f
     d1c:	a8 8b       	std	Y+16, r26	; 0x10
     d1e:	b9 8b       	std	Y+17, r27	; 0x11
     d20:	23 c0       	rjmp	.+70     	; 0xd68 <CALC_u32GetResult+0x232>
		case '-': u32Result = u32Operand1 - u32Operand2 ; break;
     d22:	8a 85       	ldd	r24, Y+10	; 0x0a
     d24:	9b 85       	ldd	r25, Y+11	; 0x0b
     d26:	ac 85       	ldd	r26, Y+12	; 0x0c
     d28:	bd 85       	ldd	r27, Y+13	; 0x0d
     d2a:	2e 81       	ldd	r18, Y+6	; 0x06
     d2c:	3f 81       	ldd	r19, Y+7	; 0x07
     d2e:	48 85       	ldd	r20, Y+8	; 0x08
     d30:	59 85       	ldd	r21, Y+9	; 0x09
     d32:	82 1b       	sub	r24, r18
     d34:	93 0b       	sbc	r25, r19
     d36:	a4 0b       	sbc	r26, r20
     d38:	b5 0b       	sbc	r27, r21
     d3a:	8e 87       	std	Y+14, r24	; 0x0e
     d3c:	9f 87       	std	Y+15, r25	; 0x0f
     d3e:	a8 8b       	std	Y+16, r26	; 0x10
     d40:	b9 8b       	std	Y+17, r27	; 0x11
     d42:	12 c0       	rjmp	.+36     	; 0xd68 <CALC_u32GetResult+0x232>
		case 'x': u32Result = u32Operand1 * u32Operand2 ; break;
     d44:	8a 85       	ldd	r24, Y+10	; 0x0a
     d46:	9b 85       	ldd	r25, Y+11	; 0x0b
     d48:	ac 85       	ldd	r26, Y+12	; 0x0c
     d4a:	bd 85       	ldd	r27, Y+13	; 0x0d
     d4c:	2e 81       	ldd	r18, Y+6	; 0x06
     d4e:	3f 81       	ldd	r19, Y+7	; 0x07
     d50:	48 85       	ldd	r20, Y+8	; 0x08
     d52:	59 85       	ldd	r21, Y+9	; 0x09
     d54:	bc 01       	movw	r22, r24
     d56:	cd 01       	movw	r24, r26
     d58:	0e 94 4e 13 	call	0x269c	; 0x269c <__mulsi3>
     d5c:	dc 01       	movw	r26, r24
     d5e:	cb 01       	movw	r24, r22
     d60:	8e 87       	std	Y+14, r24	; 0x0e
     d62:	9f 87       	std	Y+15, r25	; 0x0f
     d64:	a8 8b       	std	Y+16, r26	; 0x10
     d66:	b9 8b       	std	Y+17, r27	; 0x11
	}
	return u32Result;
     d68:	8e 85       	ldd	r24, Y+14	; 0x0e
     d6a:	9f 85       	ldd	r25, Y+15	; 0x0f
     d6c:	a8 89       	ldd	r26, Y+16	; 0x10
     d6e:	b9 89       	ldd	r27, Y+17	; 0x11
}
     d70:	bc 01       	movw	r22, r24
     d72:	cd 01       	movw	r24, r26
     d74:	6a 96       	adiw	r28, 0x1a	; 26
     d76:	0f b6       	in	r0, 0x3f	; 63
     d78:	f8 94       	cli
     d7a:	de bf       	out	0x3e, r29	; 62
     d7c:	0f be       	out	0x3f, r0	; 63
     d7e:	cd bf       	out	0x3d, r28	; 61
     d80:	cf 91       	pop	r28
     d82:	df 91       	pop	r29
     d84:	0f 91       	pop	r16
     d86:	08 95       	ret

00000d88 <CALC_u32Power>:

u32 CALC_u32Power(u8 u8Base , u8 u8Exp)
{
     d88:	df 93       	push	r29
     d8a:	cf 93       	push	r28
     d8c:	00 d0       	rcall	.+0      	; 0xd8e <CALC_u32Power+0x6>
     d8e:	00 d0       	rcall	.+0      	; 0xd90 <CALC_u32Power+0x8>
     d90:	00 d0       	rcall	.+0      	; 0xd92 <CALC_u32Power+0xa>
     d92:	cd b7       	in	r28, 0x3d	; 61
     d94:	de b7       	in	r29, 0x3e	; 62
     d96:	8d 83       	std	Y+5, r24	; 0x05
     d98:	6e 83       	std	Y+6, r22	; 0x06
	u32 u32Result = 1;
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	a0 e0       	ldi	r26, 0x00	; 0
     da0:	b0 e0       	ldi	r27, 0x00	; 0
     da2:	89 83       	std	Y+1, r24	; 0x01
     da4:	9a 83       	std	Y+2, r25	; 0x02
     da6:	ab 83       	std	Y+3, r26	; 0x03
     da8:	bc 83       	std	Y+4, r27	; 0x04
     daa:	16 c0       	rjmp	.+44     	; 0xdd8 <CALC_u32Power+0x50>
	while (u8Exp != 0)
	{
		u32Result *= u8Base;
     dac:	8d 81       	ldd	r24, Y+5	; 0x05
     dae:	28 2f       	mov	r18, r24
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	40 e0       	ldi	r20, 0x00	; 0
     db4:	50 e0       	ldi	r21, 0x00	; 0
     db6:	89 81       	ldd	r24, Y+1	; 0x01
     db8:	9a 81       	ldd	r25, Y+2	; 0x02
     dba:	ab 81       	ldd	r26, Y+3	; 0x03
     dbc:	bc 81       	ldd	r27, Y+4	; 0x04
     dbe:	bc 01       	movw	r22, r24
     dc0:	cd 01       	movw	r24, r26
     dc2:	0e 94 4e 13 	call	0x269c	; 0x269c <__mulsi3>
     dc6:	dc 01       	movw	r26, r24
     dc8:	cb 01       	movw	r24, r22
     dca:	89 83       	std	Y+1, r24	; 0x01
     dcc:	9a 83       	std	Y+2, r25	; 0x02
     dce:	ab 83       	std	Y+3, r26	; 0x03
     dd0:	bc 83       	std	Y+4, r27	; 0x04
		u8Exp--;
     dd2:	8e 81       	ldd	r24, Y+6	; 0x06
     dd4:	81 50       	subi	r24, 0x01	; 1
     dd6:	8e 83       	std	Y+6, r24	; 0x06
}

u32 CALC_u32Power(u8 u8Base , u8 u8Exp)
{
	u32 u32Result = 1;
	while (u8Exp != 0)
     dd8:	8e 81       	ldd	r24, Y+6	; 0x06
     dda:	88 23       	and	r24, r24
     ddc:	39 f7       	brne	.-50     	; 0xdac <CALC_u32Power+0x24>
	{
		u32Result *= u8Base;
		u8Exp--;
	}
	return u32Result;
     dde:	89 81       	ldd	r24, Y+1	; 0x01
     de0:	9a 81       	ldd	r25, Y+2	; 0x02
     de2:	ab 81       	ldd	r26, Y+3	; 0x03
     de4:	bc 81       	ldd	r27, Y+4	; 0x04
}
     de6:	bc 01       	movw	r22, r24
     de8:	cd 01       	movw	r24, r26
     dea:	26 96       	adiw	r28, 0x06	; 6
     dec:	0f b6       	in	r0, 0x3f	; 63
     dee:	f8 94       	cli
     df0:	de bf       	out	0x3e, r29	; 62
     df2:	0f be       	out	0x3f, r0	; 63
     df4:	cd bf       	out	0x3d, r28	; 61
     df6:	cf 91       	pop	r28
     df8:	df 91       	pop	r29
     dfa:	08 95       	ret

00000dfc <DIO_voidSetPinDir>:

/**********************************************************************************/
/**************************FUNCTIONS IMPLEMENTATION*******************************/
/********************************************************************************/
void DIO_voidSetPinDir (u8 PortId , u8 PinId , u8 PinDir)
{
     dfc:	df 93       	push	r29
     dfe:	cf 93       	push	r28
     e00:	cd b7       	in	r28, 0x3d	; 61
     e02:	de b7       	in	r29, 0x3e	; 62
     e04:	27 97       	sbiw	r28, 0x07	; 7
     e06:	0f b6       	in	r0, 0x3f	; 63
     e08:	f8 94       	cli
     e0a:	de bf       	out	0x3e, r29	; 62
     e0c:	0f be       	out	0x3f, r0	; 63
     e0e:	cd bf       	out	0x3d, r28	; 61
     e10:	89 83       	std	Y+1, r24	; 0x01
     e12:	6a 83       	std	Y+2, r22	; 0x02
     e14:	4b 83       	std	Y+3, r20	; 0x03
	/*check from allowed values for PortId & PinId*/
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7))
     e16:	89 81       	ldd	r24, Y+1	; 0x01
     e18:	84 30       	cpi	r24, 0x04	; 4
     e1a:	08 f0       	brcs	.+2      	; 0xe1e <DIO_voidSetPinDir+0x22>
     e1c:	ee c0       	rjmp	.+476    	; 0xffa <DIO_voidSetPinDir+0x1fe>
     e1e:	8a 81       	ldd	r24, Y+2	; 0x02
     e20:	88 30       	cpi	r24, 0x08	; 8
     e22:	08 f0       	brcs	.+2      	; 0xe26 <DIO_voidSetPinDir+0x2a>
     e24:	ea c0       	rjmp	.+468    	; 0xffa <DIO_voidSetPinDir+0x1fe>
	{
		/*check from PinDir value*/
		if(PinDir == DIO_OUTPUT)
     e26:	8b 81       	ldd	r24, Y+3	; 0x03
     e28:	81 30       	cpi	r24, 0x01	; 1
     e2a:	09 f0       	breq	.+2      	; 0xe2e <DIO_voidSetPinDir+0x32>
     e2c:	6f c0       	rjmp	.+222    	; 0xf0c <DIO_voidSetPinDir+0x110>
		{
			switch(PortId)
     e2e:	89 81       	ldd	r24, Y+1	; 0x01
     e30:	28 2f       	mov	r18, r24
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	3f 83       	std	Y+7, r19	; 0x07
     e36:	2e 83       	std	Y+6, r18	; 0x06
     e38:	8e 81       	ldd	r24, Y+6	; 0x06
     e3a:	9f 81       	ldd	r25, Y+7	; 0x07
     e3c:	81 30       	cpi	r24, 0x01	; 1
     e3e:	91 05       	cpc	r25, r1
     e40:	49 f1       	breq	.+82     	; 0xe94 <DIO_voidSetPinDir+0x98>
     e42:	2e 81       	ldd	r18, Y+6	; 0x06
     e44:	3f 81       	ldd	r19, Y+7	; 0x07
     e46:	22 30       	cpi	r18, 0x02	; 2
     e48:	31 05       	cpc	r19, r1
     e4a:	2c f4       	brge	.+10     	; 0xe56 <DIO_voidSetPinDir+0x5a>
     e4c:	8e 81       	ldd	r24, Y+6	; 0x06
     e4e:	9f 81       	ldd	r25, Y+7	; 0x07
     e50:	00 97       	sbiw	r24, 0x00	; 0
     e52:	61 f0       	breq	.+24     	; 0xe6c <DIO_voidSetPinDir+0x70>
     e54:	d2 c0       	rjmp	.+420    	; 0xffa <DIO_voidSetPinDir+0x1fe>
     e56:	2e 81       	ldd	r18, Y+6	; 0x06
     e58:	3f 81       	ldd	r19, Y+7	; 0x07
     e5a:	22 30       	cpi	r18, 0x02	; 2
     e5c:	31 05       	cpc	r19, r1
     e5e:	71 f1       	breq	.+92     	; 0xebc <DIO_voidSetPinDir+0xc0>
     e60:	8e 81       	ldd	r24, Y+6	; 0x06
     e62:	9f 81       	ldd	r25, Y+7	; 0x07
     e64:	83 30       	cpi	r24, 0x03	; 3
     e66:	91 05       	cpc	r25, r1
     e68:	e9 f1       	breq	.+122    	; 0xee4 <DIO_voidSetPinDir+0xe8>
     e6a:	c7 c0       	rjmp	.+398    	; 0xffa <DIO_voidSetPinDir+0x1fe>
			{
			case DIO_PORTA: SET_BIT(DDRA_REG,PinId); break;
     e6c:	aa e3       	ldi	r26, 0x3A	; 58
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	ea e3       	ldi	r30, 0x3A	; 58
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	48 2f       	mov	r20, r24
     e78:	8a 81       	ldd	r24, Y+2	; 0x02
     e7a:	28 2f       	mov	r18, r24
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	02 2e       	mov	r0, r18
     e84:	02 c0       	rjmp	.+4      	; 0xe8a <DIO_voidSetPinDir+0x8e>
     e86:	88 0f       	add	r24, r24
     e88:	99 1f       	adc	r25, r25
     e8a:	0a 94       	dec	r0
     e8c:	e2 f7       	brpl	.-8      	; 0xe86 <DIO_voidSetPinDir+0x8a>
     e8e:	84 2b       	or	r24, r20
     e90:	8c 93       	st	X, r24
     e92:	b3 c0       	rjmp	.+358    	; 0xffa <DIO_voidSetPinDir+0x1fe>
			case DIO_PORTB: SET_BIT(DDRB_REG,PinId); break;
     e94:	a7 e3       	ldi	r26, 0x37	; 55
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	e7 e3       	ldi	r30, 0x37	; 55
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	48 2f       	mov	r20, r24
     ea0:	8a 81       	ldd	r24, Y+2	; 0x02
     ea2:	28 2f       	mov	r18, r24
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	02 2e       	mov	r0, r18
     eac:	02 c0       	rjmp	.+4      	; 0xeb2 <DIO_voidSetPinDir+0xb6>
     eae:	88 0f       	add	r24, r24
     eb0:	99 1f       	adc	r25, r25
     eb2:	0a 94       	dec	r0
     eb4:	e2 f7       	brpl	.-8      	; 0xeae <DIO_voidSetPinDir+0xb2>
     eb6:	84 2b       	or	r24, r20
     eb8:	8c 93       	st	X, r24
     eba:	9f c0       	rjmp	.+318    	; 0xffa <DIO_voidSetPinDir+0x1fe>
			case DIO_PORTC: SET_BIT(DDRC_REG,PinId); break;
     ebc:	a4 e3       	ldi	r26, 0x34	; 52
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	e4 e3       	ldi	r30, 0x34	; 52
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	48 2f       	mov	r20, r24
     ec8:	8a 81       	ldd	r24, Y+2	; 0x02
     eca:	28 2f       	mov	r18, r24
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	02 2e       	mov	r0, r18
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <DIO_voidSetPinDir+0xde>
     ed6:	88 0f       	add	r24, r24
     ed8:	99 1f       	adc	r25, r25
     eda:	0a 94       	dec	r0
     edc:	e2 f7       	brpl	.-8      	; 0xed6 <DIO_voidSetPinDir+0xda>
     ede:	84 2b       	or	r24, r20
     ee0:	8c 93       	st	X, r24
     ee2:	8b c0       	rjmp	.+278    	; 0xffa <DIO_voidSetPinDir+0x1fe>
			case DIO_PORTD: SET_BIT(DDRD_REG,PinId); break;
     ee4:	a1 e3       	ldi	r26, 0x31	; 49
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e1 e3       	ldi	r30, 0x31	; 49
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	48 2f       	mov	r20, r24
     ef0:	8a 81       	ldd	r24, Y+2	; 0x02
     ef2:	28 2f       	mov	r18, r24
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	02 2e       	mov	r0, r18
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <DIO_voidSetPinDir+0x106>
     efe:	88 0f       	add	r24, r24
     f00:	99 1f       	adc	r25, r25
     f02:	0a 94       	dec	r0
     f04:	e2 f7       	brpl	.-8      	; 0xefe <DIO_voidSetPinDir+0x102>
     f06:	84 2b       	or	r24, r20
     f08:	8c 93       	st	X, r24
     f0a:	77 c0       	rjmp	.+238    	; 0xffa <DIO_voidSetPinDir+0x1fe>
			}
		}
		else if (PinDir == DIO_INPUT)
     f0c:	8b 81       	ldd	r24, Y+3	; 0x03
     f0e:	88 23       	and	r24, r24
     f10:	09 f0       	breq	.+2      	; 0xf14 <DIO_voidSetPinDir+0x118>
     f12:	73 c0       	rjmp	.+230    	; 0xffa <DIO_voidSetPinDir+0x1fe>
		{
			switch(PortId)
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	28 2f       	mov	r18, r24
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	3d 83       	std	Y+5, r19	; 0x05
     f1c:	2c 83       	std	Y+4, r18	; 0x04
     f1e:	8c 81       	ldd	r24, Y+4	; 0x04
     f20:	9d 81       	ldd	r25, Y+5	; 0x05
     f22:	81 30       	cpi	r24, 0x01	; 1
     f24:	91 05       	cpc	r25, r1
     f26:	59 f1       	breq	.+86     	; 0xf7e <DIO_voidSetPinDir+0x182>
     f28:	2c 81       	ldd	r18, Y+4	; 0x04
     f2a:	3d 81       	ldd	r19, Y+5	; 0x05
     f2c:	22 30       	cpi	r18, 0x02	; 2
     f2e:	31 05       	cpc	r19, r1
     f30:	2c f4       	brge	.+10     	; 0xf3c <DIO_voidSetPinDir+0x140>
     f32:	8c 81       	ldd	r24, Y+4	; 0x04
     f34:	9d 81       	ldd	r25, Y+5	; 0x05
     f36:	00 97       	sbiw	r24, 0x00	; 0
     f38:	69 f0       	breq	.+26     	; 0xf54 <DIO_voidSetPinDir+0x158>
     f3a:	5f c0       	rjmp	.+190    	; 0xffa <DIO_voidSetPinDir+0x1fe>
     f3c:	2c 81       	ldd	r18, Y+4	; 0x04
     f3e:	3d 81       	ldd	r19, Y+5	; 0x05
     f40:	22 30       	cpi	r18, 0x02	; 2
     f42:	31 05       	cpc	r19, r1
     f44:	89 f1       	breq	.+98     	; 0xfa8 <DIO_voidSetPinDir+0x1ac>
     f46:	8c 81       	ldd	r24, Y+4	; 0x04
     f48:	9d 81       	ldd	r25, Y+5	; 0x05
     f4a:	83 30       	cpi	r24, 0x03	; 3
     f4c:	91 05       	cpc	r25, r1
     f4e:	09 f4       	brne	.+2      	; 0xf52 <DIO_voidSetPinDir+0x156>
     f50:	40 c0       	rjmp	.+128    	; 0xfd2 <DIO_voidSetPinDir+0x1d6>
     f52:	53 c0       	rjmp	.+166    	; 0xffa <DIO_voidSetPinDir+0x1fe>
			{
			case DIO_PORTA: CLR_BIT(DDRA_REG,PinId); break;
     f54:	aa e3       	ldi	r26, 0x3A	; 58
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	ea e3       	ldi	r30, 0x3A	; 58
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	48 2f       	mov	r20, r24
     f60:	8a 81       	ldd	r24, Y+2	; 0x02
     f62:	28 2f       	mov	r18, r24
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	02 2e       	mov	r0, r18
     f6c:	02 c0       	rjmp	.+4      	; 0xf72 <DIO_voidSetPinDir+0x176>
     f6e:	88 0f       	add	r24, r24
     f70:	99 1f       	adc	r25, r25
     f72:	0a 94       	dec	r0
     f74:	e2 f7       	brpl	.-8      	; 0xf6e <DIO_voidSetPinDir+0x172>
     f76:	80 95       	com	r24
     f78:	84 23       	and	r24, r20
     f7a:	8c 93       	st	X, r24
     f7c:	3e c0       	rjmp	.+124    	; 0xffa <DIO_voidSetPinDir+0x1fe>
			case DIO_PORTB: CLR_BIT(DDRB_REG,PinId); break;
     f7e:	a7 e3       	ldi	r26, 0x37	; 55
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	e7 e3       	ldi	r30, 0x37	; 55
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	48 2f       	mov	r20, r24
     f8a:	8a 81       	ldd	r24, Y+2	; 0x02
     f8c:	28 2f       	mov	r18, r24
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	02 2e       	mov	r0, r18
     f96:	02 c0       	rjmp	.+4      	; 0xf9c <DIO_voidSetPinDir+0x1a0>
     f98:	88 0f       	add	r24, r24
     f9a:	99 1f       	adc	r25, r25
     f9c:	0a 94       	dec	r0
     f9e:	e2 f7       	brpl	.-8      	; 0xf98 <DIO_voidSetPinDir+0x19c>
     fa0:	80 95       	com	r24
     fa2:	84 23       	and	r24, r20
     fa4:	8c 93       	st	X, r24
     fa6:	29 c0       	rjmp	.+82     	; 0xffa <DIO_voidSetPinDir+0x1fe>
			case DIO_PORTC: CLR_BIT(DDRC_REG,PinId); break;
     fa8:	a4 e3       	ldi	r26, 0x34	; 52
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	e4 e3       	ldi	r30, 0x34	; 52
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	48 2f       	mov	r20, r24
     fb4:	8a 81       	ldd	r24, Y+2	; 0x02
     fb6:	28 2f       	mov	r18, r24
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	02 2e       	mov	r0, r18
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <DIO_voidSetPinDir+0x1ca>
     fc2:	88 0f       	add	r24, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	0a 94       	dec	r0
     fc8:	e2 f7       	brpl	.-8      	; 0xfc2 <DIO_voidSetPinDir+0x1c6>
     fca:	80 95       	com	r24
     fcc:	84 23       	and	r24, r20
     fce:	8c 93       	st	X, r24
     fd0:	14 c0       	rjmp	.+40     	; 0xffa <DIO_voidSetPinDir+0x1fe>
			case DIO_PORTD: CLR_BIT(DDRD_REG,PinId); break;
     fd2:	a1 e3       	ldi	r26, 0x31	; 49
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	e1 e3       	ldi	r30, 0x31	; 49
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	48 2f       	mov	r20, r24
     fde:	8a 81       	ldd	r24, Y+2	; 0x02
     fe0:	28 2f       	mov	r18, r24
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	02 2e       	mov	r0, r18
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <DIO_voidSetPinDir+0x1f4>
     fec:	88 0f       	add	r24, r24
     fee:	99 1f       	adc	r25, r25
     ff0:	0a 94       	dec	r0
     ff2:	e2 f7       	brpl	.-8      	; 0xfec <DIO_voidSetPinDir+0x1f0>
     ff4:	80 95       	com	r24
     ff6:	84 23       	and	r24, r20
     ff8:	8c 93       	st	X, r24
	}
	else
	{
		//report error
	}
}
     ffa:	27 96       	adiw	r28, 0x07	; 7
     ffc:	0f b6       	in	r0, 0x3f	; 63
     ffe:	f8 94       	cli
    1000:	de bf       	out	0x3e, r29	; 62
    1002:	0f be       	out	0x3f, r0	; 63
    1004:	cd bf       	out	0x3d, r28	; 61
    1006:	cf 91       	pop	r28
    1008:	df 91       	pop	r29
    100a:	08 95       	ret

0000100c <DIO_voidSetPinVal>:

void DIO_voidSetPinVal (u8 PortId , u8 PinId , u8 PinVal)
{
    100c:	df 93       	push	r29
    100e:	cf 93       	push	r28
    1010:	cd b7       	in	r28, 0x3d	; 61
    1012:	de b7       	in	r29, 0x3e	; 62
    1014:	27 97       	sbiw	r28, 0x07	; 7
    1016:	0f b6       	in	r0, 0x3f	; 63
    1018:	f8 94       	cli
    101a:	de bf       	out	0x3e, r29	; 62
    101c:	0f be       	out	0x3f, r0	; 63
    101e:	cd bf       	out	0x3d, r28	; 61
    1020:	89 83       	std	Y+1, r24	; 0x01
    1022:	6a 83       	std	Y+2, r22	; 0x02
    1024:	4b 83       	std	Y+3, r20	; 0x03
	/*check from allowed values for PortId & PinId*/
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7))
    1026:	89 81       	ldd	r24, Y+1	; 0x01
    1028:	84 30       	cpi	r24, 0x04	; 4
    102a:	08 f0       	brcs	.+2      	; 0x102e <DIO_voidSetPinVal+0x22>
    102c:	ee c0       	rjmp	.+476    	; 0x120a <DIO_voidSetPinVal+0x1fe>
    102e:	8a 81       	ldd	r24, Y+2	; 0x02
    1030:	88 30       	cpi	r24, 0x08	; 8
    1032:	08 f0       	brcs	.+2      	; 0x1036 <DIO_voidSetPinVal+0x2a>
    1034:	ea c0       	rjmp	.+468    	; 0x120a <DIO_voidSetPinVal+0x1fe>
	{
		/*check from PinDir value*/
		if(PinVal == DIO_HIGH)
    1036:	8b 81       	ldd	r24, Y+3	; 0x03
    1038:	81 30       	cpi	r24, 0x01	; 1
    103a:	09 f0       	breq	.+2      	; 0x103e <DIO_voidSetPinVal+0x32>
    103c:	6f c0       	rjmp	.+222    	; 0x111c <DIO_voidSetPinVal+0x110>
		{
			switch(PortId)
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	3f 83       	std	Y+7, r19	; 0x07
    1046:	2e 83       	std	Y+6, r18	; 0x06
    1048:	8e 81       	ldd	r24, Y+6	; 0x06
    104a:	9f 81       	ldd	r25, Y+7	; 0x07
    104c:	81 30       	cpi	r24, 0x01	; 1
    104e:	91 05       	cpc	r25, r1
    1050:	49 f1       	breq	.+82     	; 0x10a4 <DIO_voidSetPinVal+0x98>
    1052:	2e 81       	ldd	r18, Y+6	; 0x06
    1054:	3f 81       	ldd	r19, Y+7	; 0x07
    1056:	22 30       	cpi	r18, 0x02	; 2
    1058:	31 05       	cpc	r19, r1
    105a:	2c f4       	brge	.+10     	; 0x1066 <DIO_voidSetPinVal+0x5a>
    105c:	8e 81       	ldd	r24, Y+6	; 0x06
    105e:	9f 81       	ldd	r25, Y+7	; 0x07
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	61 f0       	breq	.+24     	; 0x107c <DIO_voidSetPinVal+0x70>
    1064:	d2 c0       	rjmp	.+420    	; 0x120a <DIO_voidSetPinVal+0x1fe>
    1066:	2e 81       	ldd	r18, Y+6	; 0x06
    1068:	3f 81       	ldd	r19, Y+7	; 0x07
    106a:	22 30       	cpi	r18, 0x02	; 2
    106c:	31 05       	cpc	r19, r1
    106e:	71 f1       	breq	.+92     	; 0x10cc <DIO_voidSetPinVal+0xc0>
    1070:	8e 81       	ldd	r24, Y+6	; 0x06
    1072:	9f 81       	ldd	r25, Y+7	; 0x07
    1074:	83 30       	cpi	r24, 0x03	; 3
    1076:	91 05       	cpc	r25, r1
    1078:	e9 f1       	breq	.+122    	; 0x10f4 <DIO_voidSetPinVal+0xe8>
    107a:	c7 c0       	rjmp	.+398    	; 0x120a <DIO_voidSetPinVal+0x1fe>
			{
			case DIO_PORTA: SET_BIT(PORTA_REG,PinId); break;
    107c:	ab e3       	ldi	r26, 0x3B	; 59
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	eb e3       	ldi	r30, 0x3B	; 59
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	48 2f       	mov	r20, r24
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	28 2f       	mov	r18, r24
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	02 2e       	mov	r0, r18
    1094:	02 c0       	rjmp	.+4      	; 0x109a <DIO_voidSetPinVal+0x8e>
    1096:	88 0f       	add	r24, r24
    1098:	99 1f       	adc	r25, r25
    109a:	0a 94       	dec	r0
    109c:	e2 f7       	brpl	.-8      	; 0x1096 <DIO_voidSetPinVal+0x8a>
    109e:	84 2b       	or	r24, r20
    10a0:	8c 93       	st	X, r24
    10a2:	b3 c0       	rjmp	.+358    	; 0x120a <DIO_voidSetPinVal+0x1fe>
			case DIO_PORTB: SET_BIT(PORTB_REG,PinId); break;
    10a4:	a8 e3       	ldi	r26, 0x38	; 56
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	e8 e3       	ldi	r30, 0x38	; 56
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	48 2f       	mov	r20, r24
    10b0:	8a 81       	ldd	r24, Y+2	; 0x02
    10b2:	28 2f       	mov	r18, r24
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	02 2e       	mov	r0, r18
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <DIO_voidSetPinVal+0xb6>
    10be:	88 0f       	add	r24, r24
    10c0:	99 1f       	adc	r25, r25
    10c2:	0a 94       	dec	r0
    10c4:	e2 f7       	brpl	.-8      	; 0x10be <DIO_voidSetPinVal+0xb2>
    10c6:	84 2b       	or	r24, r20
    10c8:	8c 93       	st	X, r24
    10ca:	9f c0       	rjmp	.+318    	; 0x120a <DIO_voidSetPinVal+0x1fe>
			case DIO_PORTC: SET_BIT(PORTC_REG,PinId); break;
    10cc:	a5 e3       	ldi	r26, 0x35	; 53
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	e5 e3       	ldi	r30, 0x35	; 53
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	48 2f       	mov	r20, r24
    10d8:	8a 81       	ldd	r24, Y+2	; 0x02
    10da:	28 2f       	mov	r18, r24
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	02 2e       	mov	r0, r18
    10e4:	02 c0       	rjmp	.+4      	; 0x10ea <DIO_voidSetPinVal+0xde>
    10e6:	88 0f       	add	r24, r24
    10e8:	99 1f       	adc	r25, r25
    10ea:	0a 94       	dec	r0
    10ec:	e2 f7       	brpl	.-8      	; 0x10e6 <DIO_voidSetPinVal+0xda>
    10ee:	84 2b       	or	r24, r20
    10f0:	8c 93       	st	X, r24
    10f2:	8b c0       	rjmp	.+278    	; 0x120a <DIO_voidSetPinVal+0x1fe>
			case DIO_PORTD: SET_BIT(PORTD_REG,PinId); break;
    10f4:	a2 e3       	ldi	r26, 0x32	; 50
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	e2 e3       	ldi	r30, 0x32	; 50
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	48 2f       	mov	r20, r24
    1100:	8a 81       	ldd	r24, Y+2	; 0x02
    1102:	28 2f       	mov	r18, r24
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	02 2e       	mov	r0, r18
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <DIO_voidSetPinVal+0x106>
    110e:	88 0f       	add	r24, r24
    1110:	99 1f       	adc	r25, r25
    1112:	0a 94       	dec	r0
    1114:	e2 f7       	brpl	.-8      	; 0x110e <DIO_voidSetPinVal+0x102>
    1116:	84 2b       	or	r24, r20
    1118:	8c 93       	st	X, r24
    111a:	77 c0       	rjmp	.+238    	; 0x120a <DIO_voidSetPinVal+0x1fe>
			}
		}
		else if (PinVal == DIO_LOW)
    111c:	8b 81       	ldd	r24, Y+3	; 0x03
    111e:	88 23       	and	r24, r24
    1120:	09 f0       	breq	.+2      	; 0x1124 <DIO_voidSetPinVal+0x118>
    1122:	73 c0       	rjmp	.+230    	; 0x120a <DIO_voidSetPinVal+0x1fe>
		{
			switch(PortId)
    1124:	89 81       	ldd	r24, Y+1	; 0x01
    1126:	28 2f       	mov	r18, r24
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	3d 83       	std	Y+5, r19	; 0x05
    112c:	2c 83       	std	Y+4, r18	; 0x04
    112e:	8c 81       	ldd	r24, Y+4	; 0x04
    1130:	9d 81       	ldd	r25, Y+5	; 0x05
    1132:	81 30       	cpi	r24, 0x01	; 1
    1134:	91 05       	cpc	r25, r1
    1136:	59 f1       	breq	.+86     	; 0x118e <DIO_voidSetPinVal+0x182>
    1138:	2c 81       	ldd	r18, Y+4	; 0x04
    113a:	3d 81       	ldd	r19, Y+5	; 0x05
    113c:	22 30       	cpi	r18, 0x02	; 2
    113e:	31 05       	cpc	r19, r1
    1140:	2c f4       	brge	.+10     	; 0x114c <DIO_voidSetPinVal+0x140>
    1142:	8c 81       	ldd	r24, Y+4	; 0x04
    1144:	9d 81       	ldd	r25, Y+5	; 0x05
    1146:	00 97       	sbiw	r24, 0x00	; 0
    1148:	69 f0       	breq	.+26     	; 0x1164 <DIO_voidSetPinVal+0x158>
    114a:	5f c0       	rjmp	.+190    	; 0x120a <DIO_voidSetPinVal+0x1fe>
    114c:	2c 81       	ldd	r18, Y+4	; 0x04
    114e:	3d 81       	ldd	r19, Y+5	; 0x05
    1150:	22 30       	cpi	r18, 0x02	; 2
    1152:	31 05       	cpc	r19, r1
    1154:	89 f1       	breq	.+98     	; 0x11b8 <DIO_voidSetPinVal+0x1ac>
    1156:	8c 81       	ldd	r24, Y+4	; 0x04
    1158:	9d 81       	ldd	r25, Y+5	; 0x05
    115a:	83 30       	cpi	r24, 0x03	; 3
    115c:	91 05       	cpc	r25, r1
    115e:	09 f4       	brne	.+2      	; 0x1162 <DIO_voidSetPinVal+0x156>
    1160:	40 c0       	rjmp	.+128    	; 0x11e2 <DIO_voidSetPinVal+0x1d6>
    1162:	53 c0       	rjmp	.+166    	; 0x120a <DIO_voidSetPinVal+0x1fe>
			{
			case DIO_PORTA: CLR_BIT(PORTA_REG,PinId); break;
    1164:	ab e3       	ldi	r26, 0x3B	; 59
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	eb e3       	ldi	r30, 0x3B	; 59
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	48 2f       	mov	r20, r24
    1170:	8a 81       	ldd	r24, Y+2	; 0x02
    1172:	28 2f       	mov	r18, r24
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	02 2e       	mov	r0, r18
    117c:	02 c0       	rjmp	.+4      	; 0x1182 <DIO_voidSetPinVal+0x176>
    117e:	88 0f       	add	r24, r24
    1180:	99 1f       	adc	r25, r25
    1182:	0a 94       	dec	r0
    1184:	e2 f7       	brpl	.-8      	; 0x117e <DIO_voidSetPinVal+0x172>
    1186:	80 95       	com	r24
    1188:	84 23       	and	r24, r20
    118a:	8c 93       	st	X, r24
    118c:	3e c0       	rjmp	.+124    	; 0x120a <DIO_voidSetPinVal+0x1fe>
			case DIO_PORTB: CLR_BIT(PORTB_REG,PinId); break;
    118e:	a8 e3       	ldi	r26, 0x38	; 56
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	e8 e3       	ldi	r30, 0x38	; 56
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	48 2f       	mov	r20, r24
    119a:	8a 81       	ldd	r24, Y+2	; 0x02
    119c:	28 2f       	mov	r18, r24
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	02 2e       	mov	r0, r18
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <DIO_voidSetPinVal+0x1a0>
    11a8:	88 0f       	add	r24, r24
    11aa:	99 1f       	adc	r25, r25
    11ac:	0a 94       	dec	r0
    11ae:	e2 f7       	brpl	.-8      	; 0x11a8 <DIO_voidSetPinVal+0x19c>
    11b0:	80 95       	com	r24
    11b2:	84 23       	and	r24, r20
    11b4:	8c 93       	st	X, r24
    11b6:	29 c0       	rjmp	.+82     	; 0x120a <DIO_voidSetPinVal+0x1fe>
			case DIO_PORTC: CLR_BIT(PORTC_REG,PinId); break;
    11b8:	a5 e3       	ldi	r26, 0x35	; 53
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	e5 e3       	ldi	r30, 0x35	; 53
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	48 2f       	mov	r20, r24
    11c4:	8a 81       	ldd	r24, Y+2	; 0x02
    11c6:	28 2f       	mov	r18, r24
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	02 2e       	mov	r0, r18
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <DIO_voidSetPinVal+0x1ca>
    11d2:	88 0f       	add	r24, r24
    11d4:	99 1f       	adc	r25, r25
    11d6:	0a 94       	dec	r0
    11d8:	e2 f7       	brpl	.-8      	; 0x11d2 <DIO_voidSetPinVal+0x1c6>
    11da:	80 95       	com	r24
    11dc:	84 23       	and	r24, r20
    11de:	8c 93       	st	X, r24
    11e0:	14 c0       	rjmp	.+40     	; 0x120a <DIO_voidSetPinVal+0x1fe>
			case DIO_PORTD: CLR_BIT(PORTD_REG,PinId); break;
    11e2:	a2 e3       	ldi	r26, 0x32	; 50
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	e2 e3       	ldi	r30, 0x32	; 50
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	48 2f       	mov	r20, r24
    11ee:	8a 81       	ldd	r24, Y+2	; 0x02
    11f0:	28 2f       	mov	r18, r24
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	02 2e       	mov	r0, r18
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <DIO_voidSetPinVal+0x1f4>
    11fc:	88 0f       	add	r24, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	0a 94       	dec	r0
    1202:	e2 f7       	brpl	.-8      	; 0x11fc <DIO_voidSetPinVal+0x1f0>
    1204:	80 95       	com	r24
    1206:	84 23       	and	r24, r20
    1208:	8c 93       	st	X, r24
	}
	else
	{
		//report error
	}
}
    120a:	27 96       	adiw	r28, 0x07	; 7
    120c:	0f b6       	in	r0, 0x3f	; 63
    120e:	f8 94       	cli
    1210:	de bf       	out	0x3e, r29	; 62
    1212:	0f be       	out	0x3f, r0	; 63
    1214:	cd bf       	out	0x3d, r28	; 61
    1216:	cf 91       	pop	r28
    1218:	df 91       	pop	r29
    121a:	08 95       	ret

0000121c <DIO_voidSetPortDir>:

void DIO_voidSetPortDir (u8 PortId , u8 PortDir)
{
    121c:	df 93       	push	r29
    121e:	cf 93       	push	r28
    1220:	00 d0       	rcall	.+0      	; 0x1222 <DIO_voidSetPortDir+0x6>
    1222:	00 d0       	rcall	.+0      	; 0x1224 <DIO_voidSetPortDir+0x8>
    1224:	cd b7       	in	r28, 0x3d	; 61
    1226:	de b7       	in	r29, 0x3e	; 62
    1228:	89 83       	std	Y+1, r24	; 0x01
    122a:	6a 83       	std	Y+2, r22	; 0x02
	/*check from allowed value for PortId */
	if (PortId <= DIO_PORTD)
    122c:	89 81       	ldd	r24, Y+1	; 0x01
    122e:	84 30       	cpi	r24, 0x04	; 4
    1230:	90 f5       	brcc	.+100    	; 0x1296 <DIO_voidSetPortDir+0x7a>
	{
		switch(PortId)
    1232:	89 81       	ldd	r24, Y+1	; 0x01
    1234:	28 2f       	mov	r18, r24
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	3c 83       	std	Y+4, r19	; 0x04
    123a:	2b 83       	std	Y+3, r18	; 0x03
    123c:	8b 81       	ldd	r24, Y+3	; 0x03
    123e:	9c 81       	ldd	r25, Y+4	; 0x04
    1240:	81 30       	cpi	r24, 0x01	; 1
    1242:	91 05       	cpc	r25, r1
    1244:	d1 f0       	breq	.+52     	; 0x127a <DIO_voidSetPortDir+0x5e>
    1246:	2b 81       	ldd	r18, Y+3	; 0x03
    1248:	3c 81       	ldd	r19, Y+4	; 0x04
    124a:	22 30       	cpi	r18, 0x02	; 2
    124c:	31 05       	cpc	r19, r1
    124e:	2c f4       	brge	.+10     	; 0x125a <DIO_voidSetPortDir+0x3e>
    1250:	8b 81       	ldd	r24, Y+3	; 0x03
    1252:	9c 81       	ldd	r25, Y+4	; 0x04
    1254:	00 97       	sbiw	r24, 0x00	; 0
    1256:	61 f0       	breq	.+24     	; 0x1270 <DIO_voidSetPortDir+0x54>
    1258:	1e c0       	rjmp	.+60     	; 0x1296 <DIO_voidSetPortDir+0x7a>
    125a:	2b 81       	ldd	r18, Y+3	; 0x03
    125c:	3c 81       	ldd	r19, Y+4	; 0x04
    125e:	22 30       	cpi	r18, 0x02	; 2
    1260:	31 05       	cpc	r19, r1
    1262:	81 f0       	breq	.+32     	; 0x1284 <DIO_voidSetPortDir+0x68>
    1264:	8b 81       	ldd	r24, Y+3	; 0x03
    1266:	9c 81       	ldd	r25, Y+4	; 0x04
    1268:	83 30       	cpi	r24, 0x03	; 3
    126a:	91 05       	cpc	r25, r1
    126c:	81 f0       	breq	.+32     	; 0x128e <DIO_voidSetPortDir+0x72>
    126e:	13 c0       	rjmp	.+38     	; 0x1296 <DIO_voidSetPortDir+0x7a>
		{
		case DIO_PORTA: DDRA_REG = PortDir; break;
    1270:	ea e3       	ldi	r30, 0x3A	; 58
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	80 83       	st	Z, r24
    1278:	0e c0       	rjmp	.+28     	; 0x1296 <DIO_voidSetPortDir+0x7a>
		case DIO_PORTB: DDRB_REG = PortDir; break;
    127a:	e7 e3       	ldi	r30, 0x37	; 55
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	8a 81       	ldd	r24, Y+2	; 0x02
    1280:	80 83       	st	Z, r24
    1282:	09 c0       	rjmp	.+18     	; 0x1296 <DIO_voidSetPortDir+0x7a>
		case DIO_PORTC: DDRC_REG = PortDir; break;
    1284:	e4 e3       	ldi	r30, 0x34	; 52
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	8a 81       	ldd	r24, Y+2	; 0x02
    128a:	80 83       	st	Z, r24
    128c:	04 c0       	rjmp	.+8      	; 0x1296 <DIO_voidSetPortDir+0x7a>
		case DIO_PORTD: DDRD_REG = PortDir; break;
    128e:	e1 e3       	ldi	r30, 0x31	; 49
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	8a 81       	ldd	r24, Y+2	; 0x02
    1294:	80 83       	st	Z, r24
	}
	else
	{
		//report error
	}
}
    1296:	0f 90       	pop	r0
    1298:	0f 90       	pop	r0
    129a:	0f 90       	pop	r0
    129c:	0f 90       	pop	r0
    129e:	cf 91       	pop	r28
    12a0:	df 91       	pop	r29
    12a2:	08 95       	ret

000012a4 <DIO_voidSetPortVal>:

void DIO_voidSetPortVal (u8 PortId , u8 PortVal)
{
    12a4:	df 93       	push	r29
    12a6:	cf 93       	push	r28
    12a8:	00 d0       	rcall	.+0      	; 0x12aa <DIO_voidSetPortVal+0x6>
    12aa:	00 d0       	rcall	.+0      	; 0x12ac <DIO_voidSetPortVal+0x8>
    12ac:	cd b7       	in	r28, 0x3d	; 61
    12ae:	de b7       	in	r29, 0x3e	; 62
    12b0:	89 83       	std	Y+1, r24	; 0x01
    12b2:	6a 83       	std	Y+2, r22	; 0x02
	/*check from allowed value for PortId */
	if (PortId <= DIO_PORTD)
    12b4:	89 81       	ldd	r24, Y+1	; 0x01
    12b6:	84 30       	cpi	r24, 0x04	; 4
    12b8:	90 f5       	brcc	.+100    	; 0x131e <DIO_voidSetPortVal+0x7a>
	{
		switch(PortId)
    12ba:	89 81       	ldd	r24, Y+1	; 0x01
    12bc:	28 2f       	mov	r18, r24
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	3c 83       	std	Y+4, r19	; 0x04
    12c2:	2b 83       	std	Y+3, r18	; 0x03
    12c4:	8b 81       	ldd	r24, Y+3	; 0x03
    12c6:	9c 81       	ldd	r25, Y+4	; 0x04
    12c8:	81 30       	cpi	r24, 0x01	; 1
    12ca:	91 05       	cpc	r25, r1
    12cc:	d1 f0       	breq	.+52     	; 0x1302 <DIO_voidSetPortVal+0x5e>
    12ce:	2b 81       	ldd	r18, Y+3	; 0x03
    12d0:	3c 81       	ldd	r19, Y+4	; 0x04
    12d2:	22 30       	cpi	r18, 0x02	; 2
    12d4:	31 05       	cpc	r19, r1
    12d6:	2c f4       	brge	.+10     	; 0x12e2 <DIO_voidSetPortVal+0x3e>
    12d8:	8b 81       	ldd	r24, Y+3	; 0x03
    12da:	9c 81       	ldd	r25, Y+4	; 0x04
    12dc:	00 97       	sbiw	r24, 0x00	; 0
    12de:	61 f0       	breq	.+24     	; 0x12f8 <DIO_voidSetPortVal+0x54>
    12e0:	1e c0       	rjmp	.+60     	; 0x131e <DIO_voidSetPortVal+0x7a>
    12e2:	2b 81       	ldd	r18, Y+3	; 0x03
    12e4:	3c 81       	ldd	r19, Y+4	; 0x04
    12e6:	22 30       	cpi	r18, 0x02	; 2
    12e8:	31 05       	cpc	r19, r1
    12ea:	81 f0       	breq	.+32     	; 0x130c <DIO_voidSetPortVal+0x68>
    12ec:	8b 81       	ldd	r24, Y+3	; 0x03
    12ee:	9c 81       	ldd	r25, Y+4	; 0x04
    12f0:	83 30       	cpi	r24, 0x03	; 3
    12f2:	91 05       	cpc	r25, r1
    12f4:	81 f0       	breq	.+32     	; 0x1316 <DIO_voidSetPortVal+0x72>
    12f6:	13 c0       	rjmp	.+38     	; 0x131e <DIO_voidSetPortVal+0x7a>
		{
		case DIO_PORTA: PORTA_REG = PortVal; break;
    12f8:	eb e3       	ldi	r30, 0x3B	; 59
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	8a 81       	ldd	r24, Y+2	; 0x02
    12fe:	80 83       	st	Z, r24
    1300:	0e c0       	rjmp	.+28     	; 0x131e <DIO_voidSetPortVal+0x7a>
		case DIO_PORTB: PORTB_REG = PortVal; break;
    1302:	e8 e3       	ldi	r30, 0x38	; 56
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	80 83       	st	Z, r24
    130a:	09 c0       	rjmp	.+18     	; 0x131e <DIO_voidSetPortVal+0x7a>
		case DIO_PORTC: PORTC_REG = PortVal; break;
    130c:	e5 e3       	ldi	r30, 0x35	; 53
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	80 83       	st	Z, r24
    1314:	04 c0       	rjmp	.+8      	; 0x131e <DIO_voidSetPortVal+0x7a>
		case DIO_PORTD: PORTD_REG = PortVal; break;
    1316:	e2 e3       	ldi	r30, 0x32	; 50
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	8a 81       	ldd	r24, Y+2	; 0x02
    131c:	80 83       	st	Z, r24
	}
	else
	{
		//report error
	}
}
    131e:	0f 90       	pop	r0
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
    1326:	cf 91       	pop	r28
    1328:	df 91       	pop	r29
    132a:	08 95       	ret

0000132c <DIO_u8GetPinVal>:

u8 DIO_u8GetPinVal (u8 PortId , u8 PinId)
{
    132c:	df 93       	push	r29
    132e:	cf 93       	push	r28
    1330:	00 d0       	rcall	.+0      	; 0x1332 <DIO_u8GetPinVal+0x6>
    1332:	00 d0       	rcall	.+0      	; 0x1334 <DIO_u8GetPinVal+0x8>
    1334:	0f 92       	push	r0
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62
    133a:	8a 83       	std	Y+2, r24	; 0x02
    133c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Result;
	/*check from allowed values for PortId & PinId*/
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7))
    133e:	8a 81       	ldd	r24, Y+2	; 0x02
    1340:	84 30       	cpi	r24, 0x04	; 4
    1342:	08 f0       	brcs	.+2      	; 0x1346 <DIO_u8GetPinVal+0x1a>
    1344:	6b c0       	rjmp	.+214    	; 0x141c <DIO_u8GetPinVal+0xf0>
    1346:	8b 81       	ldd	r24, Y+3	; 0x03
    1348:	88 30       	cpi	r24, 0x08	; 8
    134a:	08 f0       	brcs	.+2      	; 0x134e <DIO_u8GetPinVal+0x22>
    134c:	67 c0       	rjmp	.+206    	; 0x141c <DIO_u8GetPinVal+0xf0>
	{
		switch(PortId)
    134e:	8a 81       	ldd	r24, Y+2	; 0x02
    1350:	28 2f       	mov	r18, r24
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	3d 83       	std	Y+5, r19	; 0x05
    1356:	2c 83       	std	Y+4, r18	; 0x04
    1358:	4c 81       	ldd	r20, Y+4	; 0x04
    135a:	5d 81       	ldd	r21, Y+5	; 0x05
    135c:	41 30       	cpi	r20, 0x01	; 1
    135e:	51 05       	cpc	r21, r1
    1360:	41 f1       	breq	.+80     	; 0x13b2 <DIO_u8GetPinVal+0x86>
    1362:	8c 81       	ldd	r24, Y+4	; 0x04
    1364:	9d 81       	ldd	r25, Y+5	; 0x05
    1366:	82 30       	cpi	r24, 0x02	; 2
    1368:	91 05       	cpc	r25, r1
    136a:	34 f4       	brge	.+12     	; 0x1378 <DIO_u8GetPinVal+0x4c>
    136c:	2c 81       	ldd	r18, Y+4	; 0x04
    136e:	3d 81       	ldd	r19, Y+5	; 0x05
    1370:	21 15       	cp	r18, r1
    1372:	31 05       	cpc	r19, r1
    1374:	61 f0       	breq	.+24     	; 0x138e <DIO_u8GetPinVal+0x62>
    1376:	52 c0       	rjmp	.+164    	; 0x141c <DIO_u8GetPinVal+0xf0>
    1378:	4c 81       	ldd	r20, Y+4	; 0x04
    137a:	5d 81       	ldd	r21, Y+5	; 0x05
    137c:	42 30       	cpi	r20, 0x02	; 2
    137e:	51 05       	cpc	r21, r1
    1380:	51 f1       	breq	.+84     	; 0x13d6 <DIO_u8GetPinVal+0xaa>
    1382:	8c 81       	ldd	r24, Y+4	; 0x04
    1384:	9d 81       	ldd	r25, Y+5	; 0x05
    1386:	83 30       	cpi	r24, 0x03	; 3
    1388:	91 05       	cpc	r25, r1
    138a:	b9 f1       	breq	.+110    	; 0x13fa <DIO_u8GetPinVal+0xce>
    138c:	47 c0       	rjmp	.+142    	; 0x141c <DIO_u8GetPinVal+0xf0>
		{
		case DIO_PORTA: Result = GET_BIT(PINA_REG,PinId); break;
    138e:	e9 e3       	ldi	r30, 0x39	; 57
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	80 81       	ld	r24, Z
    1394:	28 2f       	mov	r18, r24
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	8b 81       	ldd	r24, Y+3	; 0x03
    139a:	88 2f       	mov	r24, r24
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	a9 01       	movw	r20, r18
    13a0:	02 c0       	rjmp	.+4      	; 0x13a6 <DIO_u8GetPinVal+0x7a>
    13a2:	55 95       	asr	r21
    13a4:	47 95       	ror	r20
    13a6:	8a 95       	dec	r24
    13a8:	e2 f7       	brpl	.-8      	; 0x13a2 <DIO_u8GetPinVal+0x76>
    13aa:	ca 01       	movw	r24, r20
    13ac:	81 70       	andi	r24, 0x01	; 1
    13ae:	89 83       	std	Y+1, r24	; 0x01
    13b0:	35 c0       	rjmp	.+106    	; 0x141c <DIO_u8GetPinVal+0xf0>
		case DIO_PORTB: Result = GET_BIT(PINB_REG,PinId); break;
    13b2:	e6 e3       	ldi	r30, 0x36	; 54
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	28 2f       	mov	r18, r24
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	8b 81       	ldd	r24, Y+3	; 0x03
    13be:	88 2f       	mov	r24, r24
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	a9 01       	movw	r20, r18
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <DIO_u8GetPinVal+0x9e>
    13c6:	55 95       	asr	r21
    13c8:	47 95       	ror	r20
    13ca:	8a 95       	dec	r24
    13cc:	e2 f7       	brpl	.-8      	; 0x13c6 <DIO_u8GetPinVal+0x9a>
    13ce:	ca 01       	movw	r24, r20
    13d0:	81 70       	andi	r24, 0x01	; 1
    13d2:	89 83       	std	Y+1, r24	; 0x01
    13d4:	23 c0       	rjmp	.+70     	; 0x141c <DIO_u8GetPinVal+0xf0>
		case DIO_PORTC: Result = GET_BIT(PINC_REG,PinId); break;
    13d6:	e3 e3       	ldi	r30, 0x33	; 51
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	28 2f       	mov	r18, r24
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	8b 81       	ldd	r24, Y+3	; 0x03
    13e2:	88 2f       	mov	r24, r24
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	a9 01       	movw	r20, r18
    13e8:	02 c0       	rjmp	.+4      	; 0x13ee <DIO_u8GetPinVal+0xc2>
    13ea:	55 95       	asr	r21
    13ec:	47 95       	ror	r20
    13ee:	8a 95       	dec	r24
    13f0:	e2 f7       	brpl	.-8      	; 0x13ea <DIO_u8GetPinVal+0xbe>
    13f2:	ca 01       	movw	r24, r20
    13f4:	81 70       	andi	r24, 0x01	; 1
    13f6:	89 83       	std	Y+1, r24	; 0x01
    13f8:	11 c0       	rjmp	.+34     	; 0x141c <DIO_u8GetPinVal+0xf0>
		case DIO_PORTD: Result = GET_BIT(PIND_REG,PinId); break;
    13fa:	e0 e3       	ldi	r30, 0x30	; 48
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	28 2f       	mov	r18, r24
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	8b 81       	ldd	r24, Y+3	; 0x03
    1406:	88 2f       	mov	r24, r24
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	a9 01       	movw	r20, r18
    140c:	02 c0       	rjmp	.+4      	; 0x1412 <DIO_u8GetPinVal+0xe6>
    140e:	55 95       	asr	r21
    1410:	47 95       	ror	r20
    1412:	8a 95       	dec	r24
    1414:	e2 f7       	brpl	.-8      	; 0x140e <DIO_u8GetPinVal+0xe2>
    1416:	ca 01       	movw	r24, r20
    1418:	81 70       	andi	r24, 0x01	; 1
    141a:	89 83       	std	Y+1, r24	; 0x01

	else
	{
		//report error
	}
	return Result;
    141c:	89 81       	ldd	r24, Y+1	; 0x01
}
    141e:	0f 90       	pop	r0
    1420:	0f 90       	pop	r0
    1422:	0f 90       	pop	r0
    1424:	0f 90       	pop	r0
    1426:	0f 90       	pop	r0
    1428:	cf 91       	pop	r28
    142a:	df 91       	pop	r29
    142c:	08 95       	ret

0000142e <KPD_u8GetKeyPressed>:
#include "KPD_interface.h"

static u8 au8KeyPressed[KPD_ROWS][KPD_COLUMNS] = KPD_MATRIX;

u8 KPD_u8GetKeyPressed(void)
{
    142e:	df 93       	push	r29
    1430:	cf 93       	push	r28
    1432:	cd b7       	in	r28, 0x3d	; 61
    1434:	de b7       	in	r29, 0x3e	; 62
    1436:	61 97       	sbiw	r28, 0x11	; 17
    1438:	0f b6       	in	r0, 0x3f	; 63
    143a:	f8 94       	cli
    143c:	de bf       	out	0x3e, r29	; 62
    143e:	0f be       	out	0x3f, r0	; 63
    1440:	cd bf       	out	0x3d, r28	; 61
	u8 u8ColIterator;
	u8 u8RowIterator;
	u8 u8KeyPressed = NULL;
    1442:	1f 86       	std	Y+15, r1	; 0x0f
	/* Loop over keypad columns to apply output"LOW" */
	for(u8ColIterator = KPD_COLUMN1 ; u8ColIterator < (KPD_COLUMNS + KPD_COLUMN1) ; u8ColIterator++)
    1444:	19 8a       	std	Y+17, r1	; 0x11
    1446:	ab c0       	rjmp	.+342    	; 0x159e <KPD_u8GetKeyPressed+0x170>
	{
		/* reset column pin */
		DIO_voidSetPinVal(KPD_COLUMNS_PORT , u8ColIterator ,DIO_LOW);
    1448:	80 e0       	ldi	r24, 0x00	; 0
    144a:	69 89       	ldd	r22, Y+17	; 0x11
    144c:	40 e0       	ldi	r20, 0x00	; 0
    144e:	0e 94 06 08 	call	0x100c	; 0x100c <DIO_voidSetPinVal>
		for(u8RowIterator = KPD_ROW1 ; u8RowIterator < (KPD_ROWS + KPD_ROW1) ; u8RowIterator++)
    1452:	84 e0       	ldi	r24, 0x04	; 4
    1454:	88 8b       	std	Y+16, r24	; 0x10
    1456:	97 c0       	rjmp	.+302    	; 0x1586 <KPD_u8GetKeyPressed+0x158>
		{
			/* get row pin status and check if it (HIGH OR LOW) to get key preesed */
			if(DIO_u8GetPinVal(KPD_ROWS_PORT,u8RowIterator) == DIO_LOW)
    1458:	80 e0       	ldi	r24, 0x00	; 0
    145a:	68 89       	ldd	r22, Y+16	; 0x10
    145c:	0e 94 96 09 	call	0x132c	; 0x132c <DIO_u8GetPinVal>
    1460:	88 23       	and	r24, r24
    1462:	09 f0       	breq	.+2      	; 0x1466 <KPD_u8GetKeyPressed+0x38>
    1464:	8d c0       	rjmp	.+282    	; 0x1580 <KPD_u8GetKeyPressed+0x152>
			{
				/* get the key pressed value */
				u8KeyPressed = au8KeyPressed[u8RowIterator-KPD_ROW1][u8ColIterator-KPD_COLUMN1];
    1466:	88 89       	ldd	r24, Y+16	; 0x10
    1468:	88 2f       	mov	r24, r24
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	ac 01       	movw	r20, r24
    146e:	44 50       	subi	r20, 0x04	; 4
    1470:	50 40       	sbci	r21, 0x00	; 0
    1472:	89 89       	ldd	r24, Y+17	; 0x11
    1474:	28 2f       	mov	r18, r24
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	ca 01       	movw	r24, r20
    147a:	88 0f       	add	r24, r24
    147c:	99 1f       	adc	r25, r25
    147e:	88 0f       	add	r24, r24
    1480:	99 1f       	adc	r25, r25
    1482:	82 0f       	add	r24, r18
    1484:	93 1f       	adc	r25, r19
    1486:	fc 01       	movw	r30, r24
    1488:	ef 56       	subi	r30, 0x6F	; 111
    148a:	ff 4f       	sbci	r31, 0xFF	; 255
    148c:	80 81       	ld	r24, Z
    148e:	8f 87       	std	Y+15, r24	; 0x0f
				/* stuck here until key not pressed */
				while(DIO_u8GetPinVal(KPD_ROWS_PORT,u8RowIterator) == DIO_LOW);
    1490:	80 e0       	ldi	r24, 0x00	; 0
    1492:	68 89       	ldd	r22, Y+16	; 0x10
    1494:	0e 94 96 09 	call	0x132c	; 0x132c <DIO_u8GetPinVal>
    1498:	88 23       	and	r24, r24
    149a:	d1 f3       	breq	.-12     	; 0x1490 <KPD_u8GetKeyPressed+0x62>
    149c:	80 e0       	ldi	r24, 0x00	; 0
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	a0 e2       	ldi	r26, 0x20	; 32
    14a2:	b1 e4       	ldi	r27, 0x41	; 65
    14a4:	8b 87       	std	Y+11, r24	; 0x0b
    14a6:	9c 87       	std	Y+12, r25	; 0x0c
    14a8:	ad 87       	std	Y+13, r26	; 0x0d
    14aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    14ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    14b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    14b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    14b4:	20 e0       	ldi	r18, 0x00	; 0
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	4a ef       	ldi	r20, 0xFA	; 250
    14ba:	54 e4       	ldi	r21, 0x44	; 68
    14bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14c0:	dc 01       	movw	r26, r24
    14c2:	cb 01       	movw	r24, r22
    14c4:	8f 83       	std	Y+7, r24	; 0x07
    14c6:	98 87       	std	Y+8, r25	; 0x08
    14c8:	a9 87       	std	Y+9, r26	; 0x09
    14ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14cc:	6f 81       	ldd	r22, Y+7	; 0x07
    14ce:	78 85       	ldd	r23, Y+8	; 0x08
    14d0:	89 85       	ldd	r24, Y+9	; 0x09
    14d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	40 e8       	ldi	r20, 0x80	; 128
    14da:	5f e3       	ldi	r21, 0x3F	; 63
    14dc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    14e0:	88 23       	and	r24, r24
    14e2:	2c f4       	brge	.+10     	; 0x14ee <KPD_u8GetKeyPressed+0xc0>
		__ticks = 1;
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	9e 83       	std	Y+6, r25	; 0x06
    14ea:	8d 83       	std	Y+5, r24	; 0x05
    14ec:	3f c0       	rjmp	.+126    	; 0x156c <KPD_u8GetKeyPressed+0x13e>
	else if (__tmp > 65535)
    14ee:	6f 81       	ldd	r22, Y+7	; 0x07
    14f0:	78 85       	ldd	r23, Y+8	; 0x08
    14f2:	89 85       	ldd	r24, Y+9	; 0x09
    14f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    14f6:	20 e0       	ldi	r18, 0x00	; 0
    14f8:	3f ef       	ldi	r19, 0xFF	; 255
    14fa:	4f e7       	ldi	r20, 0x7F	; 127
    14fc:	57 e4       	ldi	r21, 0x47	; 71
    14fe:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1502:	18 16       	cp	r1, r24
    1504:	4c f5       	brge	.+82     	; 0x1558 <KPD_u8GetKeyPressed+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1506:	6b 85       	ldd	r22, Y+11	; 0x0b
    1508:	7c 85       	ldd	r23, Y+12	; 0x0c
    150a:	8d 85       	ldd	r24, Y+13	; 0x0d
    150c:	9e 85       	ldd	r25, Y+14	; 0x0e
    150e:	20 e0       	ldi	r18, 0x00	; 0
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	40 e2       	ldi	r20, 0x20	; 32
    1514:	51 e4       	ldi	r21, 0x41	; 65
    1516:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    151a:	dc 01       	movw	r26, r24
    151c:	cb 01       	movw	r24, r22
    151e:	bc 01       	movw	r22, r24
    1520:	cd 01       	movw	r24, r26
    1522:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1526:	dc 01       	movw	r26, r24
    1528:	cb 01       	movw	r24, r22
    152a:	9e 83       	std	Y+6, r25	; 0x06
    152c:	8d 83       	std	Y+5, r24	; 0x05
    152e:	0f c0       	rjmp	.+30     	; 0x154e <KPD_u8GetKeyPressed+0x120>
    1530:	88 ec       	ldi	r24, 0xC8	; 200
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	9c 83       	std	Y+4, r25	; 0x04
    1536:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1538:	8b 81       	ldd	r24, Y+3	; 0x03
    153a:	9c 81       	ldd	r25, Y+4	; 0x04
    153c:	01 97       	sbiw	r24, 0x01	; 1
    153e:	f1 f7       	brne	.-4      	; 0x153c <KPD_u8GetKeyPressed+0x10e>
    1540:	9c 83       	std	Y+4, r25	; 0x04
    1542:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1544:	8d 81       	ldd	r24, Y+5	; 0x05
    1546:	9e 81       	ldd	r25, Y+6	; 0x06
    1548:	01 97       	sbiw	r24, 0x01	; 1
    154a:	9e 83       	std	Y+6, r25	; 0x06
    154c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    154e:	8d 81       	ldd	r24, Y+5	; 0x05
    1550:	9e 81       	ldd	r25, Y+6	; 0x06
    1552:	00 97       	sbiw	r24, 0x00	; 0
    1554:	69 f7       	brne	.-38     	; 0x1530 <KPD_u8GetKeyPressed+0x102>
    1556:	14 c0       	rjmp	.+40     	; 0x1580 <KPD_u8GetKeyPressed+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1558:	6f 81       	ldd	r22, Y+7	; 0x07
    155a:	78 85       	ldd	r23, Y+8	; 0x08
    155c:	89 85       	ldd	r24, Y+9	; 0x09
    155e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1560:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1564:	dc 01       	movw	r26, r24
    1566:	cb 01       	movw	r24, r22
    1568:	9e 83       	std	Y+6, r25	; 0x06
    156a:	8d 83       	std	Y+5, r24	; 0x05
    156c:	8d 81       	ldd	r24, Y+5	; 0x05
    156e:	9e 81       	ldd	r25, Y+6	; 0x06
    1570:	9a 83       	std	Y+2, r25	; 0x02
    1572:	89 83       	std	Y+1, r24	; 0x01
    1574:	89 81       	ldd	r24, Y+1	; 0x01
    1576:	9a 81       	ldd	r25, Y+2	; 0x02
    1578:	01 97       	sbiw	r24, 0x01	; 1
    157a:	f1 f7       	brne	.-4      	; 0x1578 <KPD_u8GetKeyPressed+0x14a>
    157c:	9a 83       	std	Y+2, r25	; 0x02
    157e:	89 83       	std	Y+1, r24	; 0x01
	/* Loop over keypad columns to apply output"LOW" */
	for(u8ColIterator = KPD_COLUMN1 ; u8ColIterator < (KPD_COLUMNS + KPD_COLUMN1) ; u8ColIterator++)
	{
		/* reset column pin */
		DIO_voidSetPinVal(KPD_COLUMNS_PORT , u8ColIterator ,DIO_LOW);
		for(u8RowIterator = KPD_ROW1 ; u8RowIterator < (KPD_ROWS + KPD_ROW1) ; u8RowIterator++)
    1580:	88 89       	ldd	r24, Y+16	; 0x10
    1582:	8f 5f       	subi	r24, 0xFF	; 255
    1584:	88 8b       	std	Y+16, r24	; 0x10
    1586:	88 89       	ldd	r24, Y+16	; 0x10
    1588:	88 30       	cpi	r24, 0x08	; 8
    158a:	08 f4       	brcc	.+2      	; 0x158e <KPD_u8GetKeyPressed+0x160>
    158c:	65 cf       	rjmp	.-310    	; 0x1458 <KPD_u8GetKeyPressed+0x2a>
				while(DIO_u8GetPinVal(KPD_ROWS_PORT,u8RowIterator) == DIO_LOW);
				_delay_ms(10);
			}
		}
		/* set column pin */
		DIO_voidSetPinVal(KPD_COLUMNS_PORT , u8ColIterator ,DIO_HIGH);
    158e:	80 e0       	ldi	r24, 0x00	; 0
    1590:	69 89       	ldd	r22, Y+17	; 0x11
    1592:	41 e0       	ldi	r20, 0x01	; 1
    1594:	0e 94 06 08 	call	0x100c	; 0x100c <DIO_voidSetPinVal>
{
	u8 u8ColIterator;
	u8 u8RowIterator;
	u8 u8KeyPressed = NULL;
	/* Loop over keypad columns to apply output"LOW" */
	for(u8ColIterator = KPD_COLUMN1 ; u8ColIterator < (KPD_COLUMNS + KPD_COLUMN1) ; u8ColIterator++)
    1598:	89 89       	ldd	r24, Y+17	; 0x11
    159a:	8f 5f       	subi	r24, 0xFF	; 255
    159c:	89 8b       	std	Y+17, r24	; 0x11
    159e:	89 89       	ldd	r24, Y+17	; 0x11
    15a0:	84 30       	cpi	r24, 0x04	; 4
    15a2:	08 f4       	brcc	.+2      	; 0x15a6 <KPD_u8GetKeyPressed+0x178>
    15a4:	51 cf       	rjmp	.-350    	; 0x1448 <KPD_u8GetKeyPressed+0x1a>
			}
		}
		/* set column pin */
		DIO_voidSetPinVal(KPD_COLUMNS_PORT , u8ColIterator ,DIO_HIGH);
	}
	return u8KeyPressed;
    15a6:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    15a8:	61 96       	adiw	r28, 0x11	; 17
    15aa:	0f b6       	in	r0, 0x3f	; 63
    15ac:	f8 94       	cli
    15ae:	de bf       	out	0x3e, r29	; 62
    15b0:	0f be       	out	0x3f, r0	; 63
    15b2:	cd bf       	out	0x3d, r28	; 61
    15b4:	cf 91       	pop	r28
    15b6:	df 91       	pop	r29
    15b8:	08 95       	ret

000015ba <LCD_voidInit>:
#include "LCD_config.h"
#include "LCD_interface.h"
#define F_CBU 8000000UL

void LCD_voidInit(void)
{
    15ba:	0f 93       	push	r16
    15bc:	1f 93       	push	r17
    15be:	df 93       	push	r29
    15c0:	cf 93       	push	r28
    15c2:	cd b7       	in	r28, 0x3d	; 61
    15c4:	de b7       	in	r29, 0x3e	; 62
    15c6:	c6 54       	subi	r28, 0x46	; 70
    15c8:	d0 40       	sbci	r29, 0x00	; 0
    15ca:	0f b6       	in	r0, 0x3f	; 63
    15cc:	f8 94       	cli
    15ce:	de bf       	out	0x3e, r29	; 62
    15d0:	0f be       	out	0x3f, r0	; 63
    15d2:	cd bf       	out	0x3d, r28	; 61
    15d4:	fe 01       	movw	r30, r28
    15d6:	ed 5b       	subi	r30, 0xBD	; 189
    15d8:	ff 4f       	sbci	r31, 0xFF	; 255
    15da:	80 e0       	ldi	r24, 0x00	; 0
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	a8 e4       	ldi	r26, 0x48	; 72
    15e0:	b2 e4       	ldi	r27, 0x42	; 66
    15e2:	80 83       	st	Z, r24
    15e4:	91 83       	std	Z+1, r25	; 0x01
    15e6:	a2 83       	std	Z+2, r26	; 0x02
    15e8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15ea:	8e 01       	movw	r16, r28
    15ec:	01 5c       	subi	r16, 0xC1	; 193
    15ee:	1f 4f       	sbci	r17, 0xFF	; 255
    15f0:	fe 01       	movw	r30, r28
    15f2:	ed 5b       	subi	r30, 0xBD	; 189
    15f4:	ff 4f       	sbci	r31, 0xFF	; 255
    15f6:	60 81       	ld	r22, Z
    15f8:	71 81       	ldd	r23, Z+1	; 0x01
    15fa:	82 81       	ldd	r24, Z+2	; 0x02
    15fc:	93 81       	ldd	r25, Z+3	; 0x03
    15fe:	20 e0       	ldi	r18, 0x00	; 0
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	4a ef       	ldi	r20, 0xFA	; 250
    1604:	54 e4       	ldi	r21, 0x44	; 68
    1606:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    160a:	dc 01       	movw	r26, r24
    160c:	cb 01       	movw	r24, r22
    160e:	f8 01       	movw	r30, r16
    1610:	80 83       	st	Z, r24
    1612:	91 83       	std	Z+1, r25	; 0x01
    1614:	a2 83       	std	Z+2, r26	; 0x02
    1616:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1618:	fe 01       	movw	r30, r28
    161a:	ff 96       	adiw	r30, 0x3f	; 63
    161c:	60 81       	ld	r22, Z
    161e:	71 81       	ldd	r23, Z+1	; 0x01
    1620:	82 81       	ldd	r24, Z+2	; 0x02
    1622:	93 81       	ldd	r25, Z+3	; 0x03
    1624:	20 e0       	ldi	r18, 0x00	; 0
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	40 e8       	ldi	r20, 0x80	; 128
    162a:	5f e3       	ldi	r21, 0x3F	; 63
    162c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1630:	88 23       	and	r24, r24
    1632:	2c f4       	brge	.+10     	; 0x163e <LCD_voidInit+0x84>
		__ticks = 1;
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	9e af       	std	Y+62, r25	; 0x3e
    163a:	8d af       	std	Y+61, r24	; 0x3d
    163c:	46 c0       	rjmp	.+140    	; 0x16ca <LCD_voidInit+0x110>
	else if (__tmp > 65535)
    163e:	fe 01       	movw	r30, r28
    1640:	ff 96       	adiw	r30, 0x3f	; 63
    1642:	60 81       	ld	r22, Z
    1644:	71 81       	ldd	r23, Z+1	; 0x01
    1646:	82 81       	ldd	r24, Z+2	; 0x02
    1648:	93 81       	ldd	r25, Z+3	; 0x03
    164a:	20 e0       	ldi	r18, 0x00	; 0
    164c:	3f ef       	ldi	r19, 0xFF	; 255
    164e:	4f e7       	ldi	r20, 0x7F	; 127
    1650:	57 e4       	ldi	r21, 0x47	; 71
    1652:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1656:	18 16       	cp	r1, r24
    1658:	64 f5       	brge	.+88     	; 0x16b2 <LCD_voidInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    165a:	fe 01       	movw	r30, r28
    165c:	ed 5b       	subi	r30, 0xBD	; 189
    165e:	ff 4f       	sbci	r31, 0xFF	; 255
    1660:	60 81       	ld	r22, Z
    1662:	71 81       	ldd	r23, Z+1	; 0x01
    1664:	82 81       	ldd	r24, Z+2	; 0x02
    1666:	93 81       	ldd	r25, Z+3	; 0x03
    1668:	20 e0       	ldi	r18, 0x00	; 0
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	40 e2       	ldi	r20, 0x20	; 32
    166e:	51 e4       	ldi	r21, 0x41	; 65
    1670:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1674:	dc 01       	movw	r26, r24
    1676:	cb 01       	movw	r24, r22
    1678:	bc 01       	movw	r22, r24
    167a:	cd 01       	movw	r24, r26
    167c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1680:	dc 01       	movw	r26, r24
    1682:	cb 01       	movw	r24, r22
    1684:	9e af       	std	Y+62, r25	; 0x3e
    1686:	8d af       	std	Y+61, r24	; 0x3d
    1688:	0f c0       	rjmp	.+30     	; 0x16a8 <LCD_voidInit+0xee>
    168a:	88 ec       	ldi	r24, 0xC8	; 200
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	9c af       	std	Y+60, r25	; 0x3c
    1690:	8b af       	std	Y+59, r24	; 0x3b
    1692:	8b ad       	ldd	r24, Y+59	; 0x3b
    1694:	9c ad       	ldd	r25, Y+60	; 0x3c
    1696:	01 97       	sbiw	r24, 0x01	; 1
    1698:	f1 f7       	brne	.-4      	; 0x1696 <LCD_voidInit+0xdc>
    169a:	9c af       	std	Y+60, r25	; 0x3c
    169c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    169e:	8d ad       	ldd	r24, Y+61	; 0x3d
    16a0:	9e ad       	ldd	r25, Y+62	; 0x3e
    16a2:	01 97       	sbiw	r24, 0x01	; 1
    16a4:	9e af       	std	Y+62, r25	; 0x3e
    16a6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16a8:	8d ad       	ldd	r24, Y+61	; 0x3d
    16aa:	9e ad       	ldd	r25, Y+62	; 0x3e
    16ac:	00 97       	sbiw	r24, 0x00	; 0
    16ae:	69 f7       	brne	.-38     	; 0x168a <LCD_voidInit+0xd0>
    16b0:	16 c0       	rjmp	.+44     	; 0x16de <LCD_voidInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16b2:	fe 01       	movw	r30, r28
    16b4:	ff 96       	adiw	r30, 0x3f	; 63
    16b6:	60 81       	ld	r22, Z
    16b8:	71 81       	ldd	r23, Z+1	; 0x01
    16ba:	82 81       	ldd	r24, Z+2	; 0x02
    16bc:	93 81       	ldd	r25, Z+3	; 0x03
    16be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16c2:	dc 01       	movw	r26, r24
    16c4:	cb 01       	movw	r24, r22
    16c6:	9e af       	std	Y+62, r25	; 0x3e
    16c8:	8d af       	std	Y+61, r24	; 0x3d
    16ca:	8d ad       	ldd	r24, Y+61	; 0x3d
    16cc:	9e ad       	ldd	r25, Y+62	; 0x3e
    16ce:	9a af       	std	Y+58, r25	; 0x3a
    16d0:	89 af       	std	Y+57, r24	; 0x39
    16d2:	89 ad       	ldd	r24, Y+57	; 0x39
    16d4:	9a ad       	ldd	r25, Y+58	; 0x3a
    16d6:	01 97       	sbiw	r24, 0x01	; 1
    16d8:	f1 f7       	brne	.-4      	; 0x16d6 <LCD_voidInit+0x11c>
    16da:	9a af       	std	Y+58, r25	; 0x3a
    16dc:	89 af       	std	Y+57, r24	; 0x39
	/* wait for more than 30ms to ensure mc initialization */
	_delay_ms(50);

	/* Function Set Command*/
	LCD_voidSendCommand(LCD_FUNCTION_SET_8BIT);
    16de:	88 e3       	ldi	r24, 0x38	; 56
    16e0:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <LCD_voidSendCommand>
    16e4:	80 e0       	ldi	r24, 0x00	; 0
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	a0 e2       	ldi	r26, 0x20	; 32
    16ea:	b1 e4       	ldi	r27, 0x41	; 65
    16ec:	8d ab       	std	Y+53, r24	; 0x35
    16ee:	9e ab       	std	Y+54, r25	; 0x36
    16f0:	af ab       	std	Y+55, r26	; 0x37
    16f2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16f4:	6d a9       	ldd	r22, Y+53	; 0x35
    16f6:	7e a9       	ldd	r23, Y+54	; 0x36
    16f8:	8f a9       	ldd	r24, Y+55	; 0x37
    16fa:	98 ad       	ldd	r25, Y+56	; 0x38
    16fc:	20 e0       	ldi	r18, 0x00	; 0
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	4a ef       	ldi	r20, 0xFA	; 250
    1702:	54 e4       	ldi	r21, 0x44	; 68
    1704:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1708:	dc 01       	movw	r26, r24
    170a:	cb 01       	movw	r24, r22
    170c:	89 ab       	std	Y+49, r24	; 0x31
    170e:	9a ab       	std	Y+50, r25	; 0x32
    1710:	ab ab       	std	Y+51, r26	; 0x33
    1712:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1714:	69 a9       	ldd	r22, Y+49	; 0x31
    1716:	7a a9       	ldd	r23, Y+50	; 0x32
    1718:	8b a9       	ldd	r24, Y+51	; 0x33
    171a:	9c a9       	ldd	r25, Y+52	; 0x34
    171c:	20 e0       	ldi	r18, 0x00	; 0
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	40 e8       	ldi	r20, 0x80	; 128
    1722:	5f e3       	ldi	r21, 0x3F	; 63
    1724:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1728:	88 23       	and	r24, r24
    172a:	2c f4       	brge	.+10     	; 0x1736 <LCD_voidInit+0x17c>
		__ticks = 1;
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	98 ab       	std	Y+48, r25	; 0x30
    1732:	8f a7       	std	Y+47, r24	; 0x2f
    1734:	3f c0       	rjmp	.+126    	; 0x17b4 <LCD_voidInit+0x1fa>
	else if (__tmp > 65535)
    1736:	69 a9       	ldd	r22, Y+49	; 0x31
    1738:	7a a9       	ldd	r23, Y+50	; 0x32
    173a:	8b a9       	ldd	r24, Y+51	; 0x33
    173c:	9c a9       	ldd	r25, Y+52	; 0x34
    173e:	20 e0       	ldi	r18, 0x00	; 0
    1740:	3f ef       	ldi	r19, 0xFF	; 255
    1742:	4f e7       	ldi	r20, 0x7F	; 127
    1744:	57 e4       	ldi	r21, 0x47	; 71
    1746:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    174a:	18 16       	cp	r1, r24
    174c:	4c f5       	brge	.+82     	; 0x17a0 <LCD_voidInit+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    174e:	6d a9       	ldd	r22, Y+53	; 0x35
    1750:	7e a9       	ldd	r23, Y+54	; 0x36
    1752:	8f a9       	ldd	r24, Y+55	; 0x37
    1754:	98 ad       	ldd	r25, Y+56	; 0x38
    1756:	20 e0       	ldi	r18, 0x00	; 0
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	40 e2       	ldi	r20, 0x20	; 32
    175c:	51 e4       	ldi	r21, 0x41	; 65
    175e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1762:	dc 01       	movw	r26, r24
    1764:	cb 01       	movw	r24, r22
    1766:	bc 01       	movw	r22, r24
    1768:	cd 01       	movw	r24, r26
    176a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    176e:	dc 01       	movw	r26, r24
    1770:	cb 01       	movw	r24, r22
    1772:	98 ab       	std	Y+48, r25	; 0x30
    1774:	8f a7       	std	Y+47, r24	; 0x2f
    1776:	0f c0       	rjmp	.+30     	; 0x1796 <LCD_voidInit+0x1dc>
    1778:	88 ec       	ldi	r24, 0xC8	; 200
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	9e a7       	std	Y+46, r25	; 0x2e
    177e:	8d a7       	std	Y+45, r24	; 0x2d
    1780:	8d a5       	ldd	r24, Y+45	; 0x2d
    1782:	9e a5       	ldd	r25, Y+46	; 0x2e
    1784:	01 97       	sbiw	r24, 0x01	; 1
    1786:	f1 f7       	brne	.-4      	; 0x1784 <LCD_voidInit+0x1ca>
    1788:	9e a7       	std	Y+46, r25	; 0x2e
    178a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    178c:	8f a5       	ldd	r24, Y+47	; 0x2f
    178e:	98 a9       	ldd	r25, Y+48	; 0x30
    1790:	01 97       	sbiw	r24, 0x01	; 1
    1792:	98 ab       	std	Y+48, r25	; 0x30
    1794:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1796:	8f a5       	ldd	r24, Y+47	; 0x2f
    1798:	98 a9       	ldd	r25, Y+48	; 0x30
    179a:	00 97       	sbiw	r24, 0x00	; 0
    179c:	69 f7       	brne	.-38     	; 0x1778 <LCD_voidInit+0x1be>
    179e:	14 c0       	rjmp	.+40     	; 0x17c8 <LCD_voidInit+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17a0:	69 a9       	ldd	r22, Y+49	; 0x31
    17a2:	7a a9       	ldd	r23, Y+50	; 0x32
    17a4:	8b a9       	ldd	r24, Y+51	; 0x33
    17a6:	9c a9       	ldd	r25, Y+52	; 0x34
    17a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17ac:	dc 01       	movw	r26, r24
    17ae:	cb 01       	movw	r24, r22
    17b0:	98 ab       	std	Y+48, r25	; 0x30
    17b2:	8f a7       	std	Y+47, r24	; 0x2f
    17b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    17b6:	98 a9       	ldd	r25, Y+48	; 0x30
    17b8:	9c a7       	std	Y+44, r25	; 0x2c
    17ba:	8b a7       	std	Y+43, r24	; 0x2b
    17bc:	8b a5       	ldd	r24, Y+43	; 0x2b
    17be:	9c a5       	ldd	r25, Y+44	; 0x2c
    17c0:	01 97       	sbiw	r24, 0x01	; 1
    17c2:	f1 f7       	brne	.-4      	; 0x17c0 <LCD_voidInit+0x206>
    17c4:	9c a7       	std	Y+44, r25	; 0x2c
    17c6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);

	/* Display ON/OFF */
	LCD_voidSendCommand(LCD_DISP_ON_CURSOR_ON);
    17c8:	8e e0       	ldi	r24, 0x0E	; 14
    17ca:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <LCD_voidSendCommand>
    17ce:	80 e0       	ldi	r24, 0x00	; 0
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	a0 e2       	ldi	r26, 0x20	; 32
    17d4:	b1 e4       	ldi	r27, 0x41	; 65
    17d6:	8f a3       	std	Y+39, r24	; 0x27
    17d8:	98 a7       	std	Y+40, r25	; 0x28
    17da:	a9 a7       	std	Y+41, r26	; 0x29
    17dc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17de:	6f a1       	ldd	r22, Y+39	; 0x27
    17e0:	78 a5       	ldd	r23, Y+40	; 0x28
    17e2:	89 a5       	ldd	r24, Y+41	; 0x29
    17e4:	9a a5       	ldd	r25, Y+42	; 0x2a
    17e6:	20 e0       	ldi	r18, 0x00	; 0
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	4a ef       	ldi	r20, 0xFA	; 250
    17ec:	54 e4       	ldi	r21, 0x44	; 68
    17ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17f2:	dc 01       	movw	r26, r24
    17f4:	cb 01       	movw	r24, r22
    17f6:	8b a3       	std	Y+35, r24	; 0x23
    17f8:	9c a3       	std	Y+36, r25	; 0x24
    17fa:	ad a3       	std	Y+37, r26	; 0x25
    17fc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17fe:	6b a1       	ldd	r22, Y+35	; 0x23
    1800:	7c a1       	ldd	r23, Y+36	; 0x24
    1802:	8d a1       	ldd	r24, Y+37	; 0x25
    1804:	9e a1       	ldd	r25, Y+38	; 0x26
    1806:	20 e0       	ldi	r18, 0x00	; 0
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	40 e8       	ldi	r20, 0x80	; 128
    180c:	5f e3       	ldi	r21, 0x3F	; 63
    180e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1812:	88 23       	and	r24, r24
    1814:	2c f4       	brge	.+10     	; 0x1820 <LCD_voidInit+0x266>
		__ticks = 1;
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	9a a3       	std	Y+34, r25	; 0x22
    181c:	89 a3       	std	Y+33, r24	; 0x21
    181e:	3f c0       	rjmp	.+126    	; 0x189e <LCD_voidInit+0x2e4>
	else if (__tmp > 65535)
    1820:	6b a1       	ldd	r22, Y+35	; 0x23
    1822:	7c a1       	ldd	r23, Y+36	; 0x24
    1824:	8d a1       	ldd	r24, Y+37	; 0x25
    1826:	9e a1       	ldd	r25, Y+38	; 0x26
    1828:	20 e0       	ldi	r18, 0x00	; 0
    182a:	3f ef       	ldi	r19, 0xFF	; 255
    182c:	4f e7       	ldi	r20, 0x7F	; 127
    182e:	57 e4       	ldi	r21, 0x47	; 71
    1830:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1834:	18 16       	cp	r1, r24
    1836:	4c f5       	brge	.+82     	; 0x188a <LCD_voidInit+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1838:	6f a1       	ldd	r22, Y+39	; 0x27
    183a:	78 a5       	ldd	r23, Y+40	; 0x28
    183c:	89 a5       	ldd	r24, Y+41	; 0x29
    183e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1840:	20 e0       	ldi	r18, 0x00	; 0
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	40 e2       	ldi	r20, 0x20	; 32
    1846:	51 e4       	ldi	r21, 0x41	; 65
    1848:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    184c:	dc 01       	movw	r26, r24
    184e:	cb 01       	movw	r24, r22
    1850:	bc 01       	movw	r22, r24
    1852:	cd 01       	movw	r24, r26
    1854:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1858:	dc 01       	movw	r26, r24
    185a:	cb 01       	movw	r24, r22
    185c:	9a a3       	std	Y+34, r25	; 0x22
    185e:	89 a3       	std	Y+33, r24	; 0x21
    1860:	0f c0       	rjmp	.+30     	; 0x1880 <LCD_voidInit+0x2c6>
    1862:	88 ec       	ldi	r24, 0xC8	; 200
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	98 a3       	std	Y+32, r25	; 0x20
    1868:	8f 8f       	std	Y+31, r24	; 0x1f
    186a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    186c:	98 a1       	ldd	r25, Y+32	; 0x20
    186e:	01 97       	sbiw	r24, 0x01	; 1
    1870:	f1 f7       	brne	.-4      	; 0x186e <LCD_voidInit+0x2b4>
    1872:	98 a3       	std	Y+32, r25	; 0x20
    1874:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1876:	89 a1       	ldd	r24, Y+33	; 0x21
    1878:	9a a1       	ldd	r25, Y+34	; 0x22
    187a:	01 97       	sbiw	r24, 0x01	; 1
    187c:	9a a3       	std	Y+34, r25	; 0x22
    187e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1880:	89 a1       	ldd	r24, Y+33	; 0x21
    1882:	9a a1       	ldd	r25, Y+34	; 0x22
    1884:	00 97       	sbiw	r24, 0x00	; 0
    1886:	69 f7       	brne	.-38     	; 0x1862 <LCD_voidInit+0x2a8>
    1888:	14 c0       	rjmp	.+40     	; 0x18b2 <LCD_voidInit+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    188a:	6b a1       	ldd	r22, Y+35	; 0x23
    188c:	7c a1       	ldd	r23, Y+36	; 0x24
    188e:	8d a1       	ldd	r24, Y+37	; 0x25
    1890:	9e a1       	ldd	r25, Y+38	; 0x26
    1892:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1896:	dc 01       	movw	r26, r24
    1898:	cb 01       	movw	r24, r22
    189a:	9a a3       	std	Y+34, r25	; 0x22
    189c:	89 a3       	std	Y+33, r24	; 0x21
    189e:	89 a1       	ldd	r24, Y+33	; 0x21
    18a0:	9a a1       	ldd	r25, Y+34	; 0x22
    18a2:	9e 8f       	std	Y+30, r25	; 0x1e
    18a4:	8d 8f       	std	Y+29, r24	; 0x1d
    18a6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18a8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18aa:	01 97       	sbiw	r24, 0x01	; 1
    18ac:	f1 f7       	brne	.-4      	; 0x18aa <LCD_voidInit+0x2f0>
    18ae:	9e 8f       	std	Y+30, r25	; 0x1e
    18b0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);

	 /* RETURN CURSOR TO FIRST POSITION FIRST LINE */
	LCD_voidSendCommand(LCD_RETURN_HOME );
    18b2:	82 e0       	ldi	r24, 0x02	; 2
    18b4:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <LCD_voidSendCommand>
    18b8:	80 e0       	ldi	r24, 0x00	; 0
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	a0 e2       	ldi	r26, 0x20	; 32
    18be:	b1 e4       	ldi	r27, 0x41	; 65
    18c0:	89 8f       	std	Y+25, r24	; 0x19
    18c2:	9a 8f       	std	Y+26, r25	; 0x1a
    18c4:	ab 8f       	std	Y+27, r26	; 0x1b
    18c6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18c8:	69 8d       	ldd	r22, Y+25	; 0x19
    18ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18d0:	20 e0       	ldi	r18, 0x00	; 0
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	4a ef       	ldi	r20, 0xFA	; 250
    18d6:	54 e4       	ldi	r21, 0x44	; 68
    18d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18dc:	dc 01       	movw	r26, r24
    18de:	cb 01       	movw	r24, r22
    18e0:	8d 8b       	std	Y+21, r24	; 0x15
    18e2:	9e 8b       	std	Y+22, r25	; 0x16
    18e4:	af 8b       	std	Y+23, r26	; 0x17
    18e6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18e8:	6d 89       	ldd	r22, Y+21	; 0x15
    18ea:	7e 89       	ldd	r23, Y+22	; 0x16
    18ec:	8f 89       	ldd	r24, Y+23	; 0x17
    18ee:	98 8d       	ldd	r25, Y+24	; 0x18
    18f0:	20 e0       	ldi	r18, 0x00	; 0
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	40 e8       	ldi	r20, 0x80	; 128
    18f6:	5f e3       	ldi	r21, 0x3F	; 63
    18f8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    18fc:	88 23       	and	r24, r24
    18fe:	2c f4       	brge	.+10     	; 0x190a <LCD_voidInit+0x350>
		__ticks = 1;
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	9c 8b       	std	Y+20, r25	; 0x14
    1906:	8b 8b       	std	Y+19, r24	; 0x13
    1908:	3f c0       	rjmp	.+126    	; 0x1988 <LCD_voidInit+0x3ce>
	else if (__tmp > 65535)
    190a:	6d 89       	ldd	r22, Y+21	; 0x15
    190c:	7e 89       	ldd	r23, Y+22	; 0x16
    190e:	8f 89       	ldd	r24, Y+23	; 0x17
    1910:	98 8d       	ldd	r25, Y+24	; 0x18
    1912:	20 e0       	ldi	r18, 0x00	; 0
    1914:	3f ef       	ldi	r19, 0xFF	; 255
    1916:	4f e7       	ldi	r20, 0x7F	; 127
    1918:	57 e4       	ldi	r21, 0x47	; 71
    191a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    191e:	18 16       	cp	r1, r24
    1920:	4c f5       	brge	.+82     	; 0x1974 <LCD_voidInit+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1922:	69 8d       	ldd	r22, Y+25	; 0x19
    1924:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1926:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1928:	9c 8d       	ldd	r25, Y+28	; 0x1c
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	40 e2       	ldi	r20, 0x20	; 32
    1930:	51 e4       	ldi	r21, 0x41	; 65
    1932:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1936:	dc 01       	movw	r26, r24
    1938:	cb 01       	movw	r24, r22
    193a:	bc 01       	movw	r22, r24
    193c:	cd 01       	movw	r24, r26
    193e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1942:	dc 01       	movw	r26, r24
    1944:	cb 01       	movw	r24, r22
    1946:	9c 8b       	std	Y+20, r25	; 0x14
    1948:	8b 8b       	std	Y+19, r24	; 0x13
    194a:	0f c0       	rjmp	.+30     	; 0x196a <LCD_voidInit+0x3b0>
    194c:	88 ec       	ldi	r24, 0xC8	; 200
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	9a 8b       	std	Y+18, r25	; 0x12
    1952:	89 8b       	std	Y+17, r24	; 0x11
    1954:	89 89       	ldd	r24, Y+17	; 0x11
    1956:	9a 89       	ldd	r25, Y+18	; 0x12
    1958:	01 97       	sbiw	r24, 0x01	; 1
    195a:	f1 f7       	brne	.-4      	; 0x1958 <LCD_voidInit+0x39e>
    195c:	9a 8b       	std	Y+18, r25	; 0x12
    195e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1960:	8b 89       	ldd	r24, Y+19	; 0x13
    1962:	9c 89       	ldd	r25, Y+20	; 0x14
    1964:	01 97       	sbiw	r24, 0x01	; 1
    1966:	9c 8b       	std	Y+20, r25	; 0x14
    1968:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    196a:	8b 89       	ldd	r24, Y+19	; 0x13
    196c:	9c 89       	ldd	r25, Y+20	; 0x14
    196e:	00 97       	sbiw	r24, 0x00	; 0
    1970:	69 f7       	brne	.-38     	; 0x194c <LCD_voidInit+0x392>
    1972:	14 c0       	rjmp	.+40     	; 0x199c <LCD_voidInit+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1974:	6d 89       	ldd	r22, Y+21	; 0x15
    1976:	7e 89       	ldd	r23, Y+22	; 0x16
    1978:	8f 89       	ldd	r24, Y+23	; 0x17
    197a:	98 8d       	ldd	r25, Y+24	; 0x18
    197c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1980:	dc 01       	movw	r26, r24
    1982:	cb 01       	movw	r24, r22
    1984:	9c 8b       	std	Y+20, r25	; 0x14
    1986:	8b 8b       	std	Y+19, r24	; 0x13
    1988:	8b 89       	ldd	r24, Y+19	; 0x13
    198a:	9c 89       	ldd	r25, Y+20	; 0x14
    198c:	98 8b       	std	Y+16, r25	; 0x10
    198e:	8f 87       	std	Y+15, r24	; 0x0f
    1990:	8f 85       	ldd	r24, Y+15	; 0x0f
    1992:	98 89       	ldd	r25, Y+16	; 0x10
    1994:	01 97       	sbiw	r24, 0x01	; 1
    1996:	f1 f7       	brne	.-4      	; 0x1994 <LCD_voidInit+0x3da>
    1998:	98 8b       	std	Y+16, r25	; 0x10
    199a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);

	/* Entry Mode Command */
	LCD_voidSendCommand(LCD_ENTERY_MODE);
    199c:	86 e0       	ldi	r24, 0x06	; 6
    199e:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <LCD_voidSendCommand>
    19a2:	80 e0       	ldi	r24, 0x00	; 0
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	a0 e2       	ldi	r26, 0x20	; 32
    19a8:	b1 e4       	ldi	r27, 0x41	; 65
    19aa:	8b 87       	std	Y+11, r24	; 0x0b
    19ac:	9c 87       	std	Y+12, r25	; 0x0c
    19ae:	ad 87       	std	Y+13, r26	; 0x0d
    19b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    19b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    19b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    19b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    19ba:	20 e0       	ldi	r18, 0x00	; 0
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	4a ef       	ldi	r20, 0xFA	; 250
    19c0:	54 e4       	ldi	r21, 0x44	; 68
    19c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19c6:	dc 01       	movw	r26, r24
    19c8:	cb 01       	movw	r24, r22
    19ca:	8f 83       	std	Y+7, r24	; 0x07
    19cc:	98 87       	std	Y+8, r25	; 0x08
    19ce:	a9 87       	std	Y+9, r26	; 0x09
    19d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19d2:	6f 81       	ldd	r22, Y+7	; 0x07
    19d4:	78 85       	ldd	r23, Y+8	; 0x08
    19d6:	89 85       	ldd	r24, Y+9	; 0x09
    19d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19da:	20 e0       	ldi	r18, 0x00	; 0
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	40 e8       	ldi	r20, 0x80	; 128
    19e0:	5f e3       	ldi	r21, 0x3F	; 63
    19e2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19e6:	88 23       	and	r24, r24
    19e8:	2c f4       	brge	.+10     	; 0x19f4 <LCD_voidInit+0x43a>
		__ticks = 1;
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	9e 83       	std	Y+6, r25	; 0x06
    19f0:	8d 83       	std	Y+5, r24	; 0x05
    19f2:	3f c0       	rjmp	.+126    	; 0x1a72 <LCD_voidInit+0x4b8>
	else if (__tmp > 65535)
    19f4:	6f 81       	ldd	r22, Y+7	; 0x07
    19f6:	78 85       	ldd	r23, Y+8	; 0x08
    19f8:	89 85       	ldd	r24, Y+9	; 0x09
    19fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    19fc:	20 e0       	ldi	r18, 0x00	; 0
    19fe:	3f ef       	ldi	r19, 0xFF	; 255
    1a00:	4f e7       	ldi	r20, 0x7F	; 127
    1a02:	57 e4       	ldi	r21, 0x47	; 71
    1a04:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a08:	18 16       	cp	r1, r24
    1a0a:	4c f5       	brge	.+82     	; 0x1a5e <LCD_voidInit+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a10:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a12:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	40 e2       	ldi	r20, 0x20	; 32
    1a1a:	51 e4       	ldi	r21, 0x41	; 65
    1a1c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a20:	dc 01       	movw	r26, r24
    1a22:	cb 01       	movw	r24, r22
    1a24:	bc 01       	movw	r22, r24
    1a26:	cd 01       	movw	r24, r26
    1a28:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	cb 01       	movw	r24, r22
    1a30:	9e 83       	std	Y+6, r25	; 0x06
    1a32:	8d 83       	std	Y+5, r24	; 0x05
    1a34:	0f c0       	rjmp	.+30     	; 0x1a54 <LCD_voidInit+0x49a>
    1a36:	88 ec       	ldi	r24, 0xC8	; 200
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	9c 83       	std	Y+4, r25	; 0x04
    1a3c:	8b 83       	std	Y+3, r24	; 0x03
    1a3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a40:	9c 81       	ldd	r25, Y+4	; 0x04
    1a42:	01 97       	sbiw	r24, 0x01	; 1
    1a44:	f1 f7       	brne	.-4      	; 0x1a42 <LCD_voidInit+0x488>
    1a46:	9c 83       	std	Y+4, r25	; 0x04
    1a48:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a4e:	01 97       	sbiw	r24, 0x01	; 1
    1a50:	9e 83       	std	Y+6, r25	; 0x06
    1a52:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a54:	8d 81       	ldd	r24, Y+5	; 0x05
    1a56:	9e 81       	ldd	r25, Y+6	; 0x06
    1a58:	00 97       	sbiw	r24, 0x00	; 0
    1a5a:	69 f7       	brne	.-38     	; 0x1a36 <LCD_voidInit+0x47c>
    1a5c:	14 c0       	rjmp	.+40     	; 0x1a86 <LCD_voidInit+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a5e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a60:	78 85       	ldd	r23, Y+8	; 0x08
    1a62:	89 85       	ldd	r24, Y+9	; 0x09
    1a64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a66:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	9e 83       	std	Y+6, r25	; 0x06
    1a70:	8d 83       	std	Y+5, r24	; 0x05
    1a72:	8d 81       	ldd	r24, Y+5	; 0x05
    1a74:	9e 81       	ldd	r25, Y+6	; 0x06
    1a76:	9a 83       	std	Y+2, r25	; 0x02
    1a78:	89 83       	std	Y+1, r24	; 0x01
    1a7a:	89 81       	ldd	r24, Y+1	; 0x01
    1a7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a7e:	01 97       	sbiw	r24, 0x01	; 1
    1a80:	f1 f7       	brne	.-4      	; 0x1a7e <LCD_voidInit+0x4c4>
    1a82:	9a 83       	std	Y+2, r25	; 0x02
    1a84:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    1a86:	ca 5b       	subi	r28, 0xBA	; 186
    1a88:	df 4f       	sbci	r29, 0xFF	; 255
    1a8a:	0f b6       	in	r0, 0x3f	; 63
    1a8c:	f8 94       	cli
    1a8e:	de bf       	out	0x3e, r29	; 62
    1a90:	0f be       	out	0x3f, r0	; 63
    1a92:	cd bf       	out	0x3d, r28	; 61
    1a94:	cf 91       	pop	r28
    1a96:	df 91       	pop	r29
    1a98:	1f 91       	pop	r17
    1a9a:	0f 91       	pop	r16
    1a9c:	08 95       	ret

00001a9e <LCD_voidSendCommand>:

void LCD_voidSendCommand(u8 u8cmd)
{
    1a9e:	df 93       	push	r29
    1aa0:	cf 93       	push	r28
    1aa2:	cd b7       	in	r28, 0x3d	; 61
    1aa4:	de b7       	in	r29, 0x3e	; 62
    1aa6:	6d 97       	sbiw	r28, 0x1d	; 29
    1aa8:	0f b6       	in	r0, 0x3f	; 63
    1aaa:	f8 94       	cli
    1aac:	de bf       	out	0x3e, r29	; 62
    1aae:	0f be       	out	0x3f, r0	; 63
    1ab0:	cd bf       	out	0x3d, r28	; 61
    1ab2:	8d 8f       	std	Y+29, r24	; 0x1d
	/* Clear RS Pin	 */
	DIO_voidSetPinVal(LCD_CONTROL_PORT , LCD_RS_PIN , DIO_LOW);
    1ab4:	83 e0       	ldi	r24, 0x03	; 3
    1ab6:	62 e0       	ldi	r22, 0x02	; 2
    1ab8:	40 e0       	ldi	r20, 0x00	; 0
    1aba:	0e 94 06 08 	call	0x100c	; 0x100c <DIO_voidSetPinVal>

	/* Clear RW Pin */
	DIO_voidSetPinVal(LCD_CONTROL_PORT , LCD_RW_PIN , DIO_LOW);
    1abe:	83 e0       	ldi	r24, 0x03	; 3
    1ac0:	61 e0       	ldi	r22, 0x01	; 1
    1ac2:	40 e0       	ldi	r20, 0x00	; 0
    1ac4:	0e 94 06 08 	call	0x100c	; 0x100c <DIO_voidSetPinVal>

	/* Set E Pin to High */
	DIO_voidSetPinVal(LCD_CONTROL_PORT , LCD_E_PIN , DIO_HIGH);
    1ac8:	83 e0       	ldi	r24, 0x03	; 3
    1aca:	60 e0       	ldi	r22, 0x00	; 0
    1acc:	41 e0       	ldi	r20, 0x01	; 1
    1ace:	0e 94 06 08 	call	0x100c	; 0x100c <DIO_voidSetPinVal>

	/* Load Command to the Data Pins */
	DIO_voidSetPortVal(LCD_DATA_PORT , u8cmd);
    1ad2:	82 e0       	ldi	r24, 0x02	; 2
    1ad4:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1ad6:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_voidSetPortVal>

	/* Clear E Pin */
	DIO_voidSetPinVal(LCD_CONTROL_PORT , LCD_E_PIN , DIO_LOW);
    1ada:	83 e0       	ldi	r24, 0x03	; 3
    1adc:	60 e0       	ldi	r22, 0x00	; 0
    1ade:	40 e0       	ldi	r20, 0x00	; 0
    1ae0:	0e 94 06 08 	call	0x100c	; 0x100c <DIO_voidSetPinVal>
    1ae4:	80 e0       	ldi	r24, 0x00	; 0
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	a0 ea       	ldi	r26, 0xA0	; 160
    1aea:	b0 e4       	ldi	r27, 0x40	; 64
    1aec:	89 8f       	std	Y+25, r24	; 0x19
    1aee:	9a 8f       	std	Y+26, r25	; 0x1a
    1af0:	ab 8f       	std	Y+27, r26	; 0x1b
    1af2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1af4:	69 8d       	ldd	r22, Y+25	; 0x19
    1af6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1af8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1afa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1afc:	20 e0       	ldi	r18, 0x00	; 0
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	4a ef       	ldi	r20, 0xFA	; 250
    1b02:	54 e4       	ldi	r21, 0x44	; 68
    1b04:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b08:	dc 01       	movw	r26, r24
    1b0a:	cb 01       	movw	r24, r22
    1b0c:	8d 8b       	std	Y+21, r24	; 0x15
    1b0e:	9e 8b       	std	Y+22, r25	; 0x16
    1b10:	af 8b       	std	Y+23, r26	; 0x17
    1b12:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b14:	6d 89       	ldd	r22, Y+21	; 0x15
    1b16:	7e 89       	ldd	r23, Y+22	; 0x16
    1b18:	8f 89       	ldd	r24, Y+23	; 0x17
    1b1a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	40 e8       	ldi	r20, 0x80	; 128
    1b22:	5f e3       	ldi	r21, 0x3F	; 63
    1b24:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b28:	88 23       	and	r24, r24
    1b2a:	2c f4       	brge	.+10     	; 0x1b36 <LCD_voidSendCommand+0x98>
		__ticks = 1;
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	9c 8b       	std	Y+20, r25	; 0x14
    1b32:	8b 8b       	std	Y+19, r24	; 0x13
    1b34:	3f c0       	rjmp	.+126    	; 0x1bb4 <LCD_voidSendCommand+0x116>
	else if (__tmp > 65535)
    1b36:	6d 89       	ldd	r22, Y+21	; 0x15
    1b38:	7e 89       	ldd	r23, Y+22	; 0x16
    1b3a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b3c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	3f ef       	ldi	r19, 0xFF	; 255
    1b42:	4f e7       	ldi	r20, 0x7F	; 127
    1b44:	57 e4       	ldi	r21, 0x47	; 71
    1b46:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b4a:	18 16       	cp	r1, r24
    1b4c:	4c f5       	brge	.+82     	; 0x1ba0 <LCD_voidSendCommand+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b4e:	69 8d       	ldd	r22, Y+25	; 0x19
    1b50:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b52:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b54:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b56:	20 e0       	ldi	r18, 0x00	; 0
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	40 e2       	ldi	r20, 0x20	; 32
    1b5c:	51 e4       	ldi	r21, 0x41	; 65
    1b5e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b62:	dc 01       	movw	r26, r24
    1b64:	cb 01       	movw	r24, r22
    1b66:	bc 01       	movw	r22, r24
    1b68:	cd 01       	movw	r24, r26
    1b6a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b6e:	dc 01       	movw	r26, r24
    1b70:	cb 01       	movw	r24, r22
    1b72:	9c 8b       	std	Y+20, r25	; 0x14
    1b74:	8b 8b       	std	Y+19, r24	; 0x13
    1b76:	0f c0       	rjmp	.+30     	; 0x1b96 <LCD_voidSendCommand+0xf8>
    1b78:	88 ec       	ldi	r24, 0xC8	; 200
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	9a 8b       	std	Y+18, r25	; 0x12
    1b7e:	89 8b       	std	Y+17, r24	; 0x11
    1b80:	89 89       	ldd	r24, Y+17	; 0x11
    1b82:	9a 89       	ldd	r25, Y+18	; 0x12
    1b84:	01 97       	sbiw	r24, 0x01	; 1
    1b86:	f1 f7       	brne	.-4      	; 0x1b84 <LCD_voidSendCommand+0xe6>
    1b88:	9a 8b       	std	Y+18, r25	; 0x12
    1b8a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b8c:	8b 89       	ldd	r24, Y+19	; 0x13
    1b8e:	9c 89       	ldd	r25, Y+20	; 0x14
    1b90:	01 97       	sbiw	r24, 0x01	; 1
    1b92:	9c 8b       	std	Y+20, r25	; 0x14
    1b94:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b96:	8b 89       	ldd	r24, Y+19	; 0x13
    1b98:	9c 89       	ldd	r25, Y+20	; 0x14
    1b9a:	00 97       	sbiw	r24, 0x00	; 0
    1b9c:	69 f7       	brne	.-38     	; 0x1b78 <LCD_voidSendCommand+0xda>
    1b9e:	14 c0       	rjmp	.+40     	; 0x1bc8 <LCD_voidSendCommand+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ba0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ba2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ba4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ba6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ba8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	9c 8b       	std	Y+20, r25	; 0x14
    1bb2:	8b 8b       	std	Y+19, r24	; 0x13
    1bb4:	8b 89       	ldd	r24, Y+19	; 0x13
    1bb6:	9c 89       	ldd	r25, Y+20	; 0x14
    1bb8:	98 8b       	std	Y+16, r25	; 0x10
    1bba:	8f 87       	std	Y+15, r24	; 0x0f
    1bbc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bbe:	98 89       	ldd	r25, Y+16	; 0x10
    1bc0:	01 97       	sbiw	r24, 0x01	; 1
    1bc2:	f1 f7       	brne	.-4      	; 0x1bc0 <LCD_voidSendCommand+0x122>
    1bc4:	98 8b       	std	Y+16, r25	; 0x10
    1bc6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);

	/* Set E Pin to High */
	DIO_voidSetPinVal(LCD_CONTROL_PORT , LCD_E_PIN , DIO_HIGH);
    1bc8:	83 e0       	ldi	r24, 0x03	; 3
    1bca:	60 e0       	ldi	r22, 0x00	; 0
    1bcc:	41 e0       	ldi	r20, 0x01	; 1
    1bce:	0e 94 06 08 	call	0x100c	; 0x100c <DIO_voidSetPinVal>
    1bd2:	80 e0       	ldi	r24, 0x00	; 0
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	a0 e2       	ldi	r26, 0x20	; 32
    1bd8:	b1 e4       	ldi	r27, 0x41	; 65
    1bda:	8b 87       	std	Y+11, r24	; 0x0b
    1bdc:	9c 87       	std	Y+12, r25	; 0x0c
    1bde:	ad 87       	std	Y+13, r26	; 0x0d
    1be0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1be2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1be4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1be6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1be8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bea:	20 e0       	ldi	r18, 0x00	; 0
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	4a ef       	ldi	r20, 0xFA	; 250
    1bf0:	54 e4       	ldi	r21, 0x44	; 68
    1bf2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bf6:	dc 01       	movw	r26, r24
    1bf8:	cb 01       	movw	r24, r22
    1bfa:	8f 83       	std	Y+7, r24	; 0x07
    1bfc:	98 87       	std	Y+8, r25	; 0x08
    1bfe:	a9 87       	std	Y+9, r26	; 0x09
    1c00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c02:	6f 81       	ldd	r22, Y+7	; 0x07
    1c04:	78 85       	ldd	r23, Y+8	; 0x08
    1c06:	89 85       	ldd	r24, Y+9	; 0x09
    1c08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c0a:	20 e0       	ldi	r18, 0x00	; 0
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	40 e8       	ldi	r20, 0x80	; 128
    1c10:	5f e3       	ldi	r21, 0x3F	; 63
    1c12:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c16:	88 23       	and	r24, r24
    1c18:	2c f4       	brge	.+10     	; 0x1c24 <LCD_voidSendCommand+0x186>
		__ticks = 1;
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	9e 83       	std	Y+6, r25	; 0x06
    1c20:	8d 83       	std	Y+5, r24	; 0x05
    1c22:	3f c0       	rjmp	.+126    	; 0x1ca2 <LCD_voidSendCommand+0x204>
	else if (__tmp > 65535)
    1c24:	6f 81       	ldd	r22, Y+7	; 0x07
    1c26:	78 85       	ldd	r23, Y+8	; 0x08
    1c28:	89 85       	ldd	r24, Y+9	; 0x09
    1c2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c2c:	20 e0       	ldi	r18, 0x00	; 0
    1c2e:	3f ef       	ldi	r19, 0xFF	; 255
    1c30:	4f e7       	ldi	r20, 0x7F	; 127
    1c32:	57 e4       	ldi	r21, 0x47	; 71
    1c34:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c38:	18 16       	cp	r1, r24
    1c3a:	4c f5       	brge	.+82     	; 0x1c8e <LCD_voidSendCommand+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c40:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c42:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c44:	20 e0       	ldi	r18, 0x00	; 0
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	40 e2       	ldi	r20, 0x20	; 32
    1c4a:	51 e4       	ldi	r21, 0x41	; 65
    1c4c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c50:	dc 01       	movw	r26, r24
    1c52:	cb 01       	movw	r24, r22
    1c54:	bc 01       	movw	r22, r24
    1c56:	cd 01       	movw	r24, r26
    1c58:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c5c:	dc 01       	movw	r26, r24
    1c5e:	cb 01       	movw	r24, r22
    1c60:	9e 83       	std	Y+6, r25	; 0x06
    1c62:	8d 83       	std	Y+5, r24	; 0x05
    1c64:	0f c0       	rjmp	.+30     	; 0x1c84 <LCD_voidSendCommand+0x1e6>
    1c66:	88 ec       	ldi	r24, 0xC8	; 200
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	9c 83       	std	Y+4, r25	; 0x04
    1c6c:	8b 83       	std	Y+3, r24	; 0x03
    1c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c70:	9c 81       	ldd	r25, Y+4	; 0x04
    1c72:	01 97       	sbiw	r24, 0x01	; 1
    1c74:	f1 f7       	brne	.-4      	; 0x1c72 <LCD_voidSendCommand+0x1d4>
    1c76:	9c 83       	std	Y+4, r25	; 0x04
    1c78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c7e:	01 97       	sbiw	r24, 0x01	; 1
    1c80:	9e 83       	std	Y+6, r25	; 0x06
    1c82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c84:	8d 81       	ldd	r24, Y+5	; 0x05
    1c86:	9e 81       	ldd	r25, Y+6	; 0x06
    1c88:	00 97       	sbiw	r24, 0x00	; 0
    1c8a:	69 f7       	brne	.-38     	; 0x1c66 <LCD_voidSendCommand+0x1c8>
    1c8c:	14 c0       	rjmp	.+40     	; 0x1cb6 <LCD_voidSendCommand+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c90:	78 85       	ldd	r23, Y+8	; 0x08
    1c92:	89 85       	ldd	r24, Y+9	; 0x09
    1c94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c96:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	cb 01       	movw	r24, r22
    1c9e:	9e 83       	std	Y+6, r25	; 0x06
    1ca0:	8d 83       	std	Y+5, r24	; 0x05
    1ca2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca6:	9a 83       	std	Y+2, r25	; 0x02
    1ca8:	89 83       	std	Y+1, r24	; 0x01
    1caa:	89 81       	ldd	r24, Y+1	; 0x01
    1cac:	9a 81       	ldd	r25, Y+2	; 0x02
    1cae:	01 97       	sbiw	r24, 0x01	; 1
    1cb0:	f1 f7       	brne	.-4      	; 0x1cae <LCD_voidSendCommand+0x210>
    1cb2:	9a 83       	std	Y+2, r25	; 0x02
    1cb4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);

}
    1cb6:	6d 96       	adiw	r28, 0x1d	; 29
    1cb8:	0f b6       	in	r0, 0x3f	; 63
    1cba:	f8 94       	cli
    1cbc:	de bf       	out	0x3e, r29	; 62
    1cbe:	0f be       	out	0x3f, r0	; 63
    1cc0:	cd bf       	out	0x3d, r28	; 61
    1cc2:	cf 91       	pop	r28
    1cc4:	df 91       	pop	r29
    1cc6:	08 95       	ret

00001cc8 <LCD_voidSendData>:

void LCD_voidSendData(u8 u8CharData)
{
    1cc8:	df 93       	push	r29
    1cca:	cf 93       	push	r28
    1ccc:	cd b7       	in	r28, 0x3d	; 61
    1cce:	de b7       	in	r29, 0x3e	; 62
    1cd0:	6d 97       	sbiw	r28, 0x1d	; 29
    1cd2:	0f b6       	in	r0, 0x3f	; 63
    1cd4:	f8 94       	cli
    1cd6:	de bf       	out	0x3e, r29	; 62
    1cd8:	0f be       	out	0x3f, r0	; 63
    1cda:	cd bf       	out	0x3d, r28	; 61
    1cdc:	8d 8f       	std	Y+29, r24	; 0x1d
	/* Set RS Pin to High	 */
	DIO_voidSetPinVal(LCD_CONTROL_PORT , LCD_RS_PIN , DIO_HIGH);
    1cde:	83 e0       	ldi	r24, 0x03	; 3
    1ce0:	62 e0       	ldi	r22, 0x02	; 2
    1ce2:	41 e0       	ldi	r20, 0x01	; 1
    1ce4:	0e 94 06 08 	call	0x100c	; 0x100c <DIO_voidSetPinVal>

	/* Clear RW Pin */
	DIO_voidSetPinVal(LCD_CONTROL_PORT , LCD_RW_PIN , DIO_LOW);
    1ce8:	83 e0       	ldi	r24, 0x03	; 3
    1cea:	61 e0       	ldi	r22, 0x01	; 1
    1cec:	40 e0       	ldi	r20, 0x00	; 0
    1cee:	0e 94 06 08 	call	0x100c	; 0x100c <DIO_voidSetPinVal>

	/* Set E Pin to High */
	DIO_voidSetPinVal(LCD_CONTROL_PORT , LCD_E_PIN , DIO_HIGH);
    1cf2:	83 e0       	ldi	r24, 0x03	; 3
    1cf4:	60 e0       	ldi	r22, 0x00	; 0
    1cf6:	41 e0       	ldi	r20, 0x01	; 1
    1cf8:	0e 94 06 08 	call	0x100c	; 0x100c <DIO_voidSetPinVal>

	/* Load Command to the Data Pins */
	DIO_voidSetPortVal(LCD_DATA_PORT , u8CharData);
    1cfc:	82 e0       	ldi	r24, 0x02	; 2
    1cfe:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1d00:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_voidSetPortVal>

	/* Clear E Pin */
	DIO_voidSetPinVal(LCD_CONTROL_PORT , LCD_E_PIN , DIO_LOW);
    1d04:	83 e0       	ldi	r24, 0x03	; 3
    1d06:	60 e0       	ldi	r22, 0x00	; 0
    1d08:	40 e0       	ldi	r20, 0x00	; 0
    1d0a:	0e 94 06 08 	call	0x100c	; 0x100c <DIO_voidSetPinVal>
    1d0e:	80 e0       	ldi	r24, 0x00	; 0
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	a0 ea       	ldi	r26, 0xA0	; 160
    1d14:	b0 e4       	ldi	r27, 0x40	; 64
    1d16:	89 8f       	std	Y+25, r24	; 0x19
    1d18:	9a 8f       	std	Y+26, r25	; 0x1a
    1d1a:	ab 8f       	std	Y+27, r26	; 0x1b
    1d1c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d1e:	69 8d       	ldd	r22, Y+25	; 0x19
    1d20:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d26:	20 e0       	ldi	r18, 0x00	; 0
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	4a ef       	ldi	r20, 0xFA	; 250
    1d2c:	54 e4       	ldi	r21, 0x44	; 68
    1d2e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d32:	dc 01       	movw	r26, r24
    1d34:	cb 01       	movw	r24, r22
    1d36:	8d 8b       	std	Y+21, r24	; 0x15
    1d38:	9e 8b       	std	Y+22, r25	; 0x16
    1d3a:	af 8b       	std	Y+23, r26	; 0x17
    1d3c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d3e:	6d 89       	ldd	r22, Y+21	; 0x15
    1d40:	7e 89       	ldd	r23, Y+22	; 0x16
    1d42:	8f 89       	ldd	r24, Y+23	; 0x17
    1d44:	98 8d       	ldd	r25, Y+24	; 0x18
    1d46:	20 e0       	ldi	r18, 0x00	; 0
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	40 e8       	ldi	r20, 0x80	; 128
    1d4c:	5f e3       	ldi	r21, 0x3F	; 63
    1d4e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d52:	88 23       	and	r24, r24
    1d54:	2c f4       	brge	.+10     	; 0x1d60 <LCD_voidSendData+0x98>
		__ticks = 1;
    1d56:	81 e0       	ldi	r24, 0x01	; 1
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	9c 8b       	std	Y+20, r25	; 0x14
    1d5c:	8b 8b       	std	Y+19, r24	; 0x13
    1d5e:	3f c0       	rjmp	.+126    	; 0x1dde <LCD_voidSendData+0x116>
	else if (__tmp > 65535)
    1d60:	6d 89       	ldd	r22, Y+21	; 0x15
    1d62:	7e 89       	ldd	r23, Y+22	; 0x16
    1d64:	8f 89       	ldd	r24, Y+23	; 0x17
    1d66:	98 8d       	ldd	r25, Y+24	; 0x18
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	3f ef       	ldi	r19, 0xFF	; 255
    1d6c:	4f e7       	ldi	r20, 0x7F	; 127
    1d6e:	57 e4       	ldi	r21, 0x47	; 71
    1d70:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d74:	18 16       	cp	r1, r24
    1d76:	4c f5       	brge	.+82     	; 0x1dca <LCD_voidSendData+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d78:	69 8d       	ldd	r22, Y+25	; 0x19
    1d7a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	40 e2       	ldi	r20, 0x20	; 32
    1d86:	51 e4       	ldi	r21, 0x41	; 65
    1d88:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d8c:	dc 01       	movw	r26, r24
    1d8e:	cb 01       	movw	r24, r22
    1d90:	bc 01       	movw	r22, r24
    1d92:	cd 01       	movw	r24, r26
    1d94:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d98:	dc 01       	movw	r26, r24
    1d9a:	cb 01       	movw	r24, r22
    1d9c:	9c 8b       	std	Y+20, r25	; 0x14
    1d9e:	8b 8b       	std	Y+19, r24	; 0x13
    1da0:	0f c0       	rjmp	.+30     	; 0x1dc0 <LCD_voidSendData+0xf8>
    1da2:	88 ec       	ldi	r24, 0xC8	; 200
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	9a 8b       	std	Y+18, r25	; 0x12
    1da8:	89 8b       	std	Y+17, r24	; 0x11
    1daa:	89 89       	ldd	r24, Y+17	; 0x11
    1dac:	9a 89       	ldd	r25, Y+18	; 0x12
    1dae:	01 97       	sbiw	r24, 0x01	; 1
    1db0:	f1 f7       	brne	.-4      	; 0x1dae <LCD_voidSendData+0xe6>
    1db2:	9a 8b       	std	Y+18, r25	; 0x12
    1db4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1db6:	8b 89       	ldd	r24, Y+19	; 0x13
    1db8:	9c 89       	ldd	r25, Y+20	; 0x14
    1dba:	01 97       	sbiw	r24, 0x01	; 1
    1dbc:	9c 8b       	std	Y+20, r25	; 0x14
    1dbe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dc0:	8b 89       	ldd	r24, Y+19	; 0x13
    1dc2:	9c 89       	ldd	r25, Y+20	; 0x14
    1dc4:	00 97       	sbiw	r24, 0x00	; 0
    1dc6:	69 f7       	brne	.-38     	; 0x1da2 <LCD_voidSendData+0xda>
    1dc8:	14 c0       	rjmp	.+40     	; 0x1df2 <LCD_voidSendData+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dca:	6d 89       	ldd	r22, Y+21	; 0x15
    1dcc:	7e 89       	ldd	r23, Y+22	; 0x16
    1dce:	8f 89       	ldd	r24, Y+23	; 0x17
    1dd0:	98 8d       	ldd	r25, Y+24	; 0x18
    1dd2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dd6:	dc 01       	movw	r26, r24
    1dd8:	cb 01       	movw	r24, r22
    1dda:	9c 8b       	std	Y+20, r25	; 0x14
    1ddc:	8b 8b       	std	Y+19, r24	; 0x13
    1dde:	8b 89       	ldd	r24, Y+19	; 0x13
    1de0:	9c 89       	ldd	r25, Y+20	; 0x14
    1de2:	98 8b       	std	Y+16, r25	; 0x10
    1de4:	8f 87       	std	Y+15, r24	; 0x0f
    1de6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1de8:	98 89       	ldd	r25, Y+16	; 0x10
    1dea:	01 97       	sbiw	r24, 0x01	; 1
    1dec:	f1 f7       	brne	.-4      	; 0x1dea <LCD_voidSendData+0x122>
    1dee:	98 8b       	std	Y+16, r25	; 0x10
    1df0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);

	/* Set E Pin to High */
	DIO_voidSetPinVal(LCD_CONTROL_PORT , LCD_E_PIN , DIO_HIGH);
    1df2:	83 e0       	ldi	r24, 0x03	; 3
    1df4:	60 e0       	ldi	r22, 0x00	; 0
    1df6:	41 e0       	ldi	r20, 0x01	; 1
    1df8:	0e 94 06 08 	call	0x100c	; 0x100c <DIO_voidSetPinVal>
    1dfc:	80 e0       	ldi	r24, 0x00	; 0
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	a0 e2       	ldi	r26, 0x20	; 32
    1e02:	b1 e4       	ldi	r27, 0x41	; 65
    1e04:	8b 87       	std	Y+11, r24	; 0x0b
    1e06:	9c 87       	std	Y+12, r25	; 0x0c
    1e08:	ad 87       	std	Y+13, r26	; 0x0d
    1e0a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e10:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e12:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e14:	20 e0       	ldi	r18, 0x00	; 0
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	4a ef       	ldi	r20, 0xFA	; 250
    1e1a:	54 e4       	ldi	r21, 0x44	; 68
    1e1c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e20:	dc 01       	movw	r26, r24
    1e22:	cb 01       	movw	r24, r22
    1e24:	8f 83       	std	Y+7, r24	; 0x07
    1e26:	98 87       	std	Y+8, r25	; 0x08
    1e28:	a9 87       	std	Y+9, r26	; 0x09
    1e2a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e2c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e2e:	78 85       	ldd	r23, Y+8	; 0x08
    1e30:	89 85       	ldd	r24, Y+9	; 0x09
    1e32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e34:	20 e0       	ldi	r18, 0x00	; 0
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	40 e8       	ldi	r20, 0x80	; 128
    1e3a:	5f e3       	ldi	r21, 0x3F	; 63
    1e3c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e40:	88 23       	and	r24, r24
    1e42:	2c f4       	brge	.+10     	; 0x1e4e <LCD_voidSendData+0x186>
		__ticks = 1;
    1e44:	81 e0       	ldi	r24, 0x01	; 1
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	9e 83       	std	Y+6, r25	; 0x06
    1e4a:	8d 83       	std	Y+5, r24	; 0x05
    1e4c:	3f c0       	rjmp	.+126    	; 0x1ecc <LCD_voidSendData+0x204>
	else if (__tmp > 65535)
    1e4e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e50:	78 85       	ldd	r23, Y+8	; 0x08
    1e52:	89 85       	ldd	r24, Y+9	; 0x09
    1e54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e56:	20 e0       	ldi	r18, 0x00	; 0
    1e58:	3f ef       	ldi	r19, 0xFF	; 255
    1e5a:	4f e7       	ldi	r20, 0x7F	; 127
    1e5c:	57 e4       	ldi	r21, 0x47	; 71
    1e5e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e62:	18 16       	cp	r1, r24
    1e64:	4c f5       	brge	.+82     	; 0x1eb8 <LCD_voidSendData+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e66:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e68:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e6e:	20 e0       	ldi	r18, 0x00	; 0
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	40 e2       	ldi	r20, 0x20	; 32
    1e74:	51 e4       	ldi	r21, 0x41	; 65
    1e76:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e7a:	dc 01       	movw	r26, r24
    1e7c:	cb 01       	movw	r24, r22
    1e7e:	bc 01       	movw	r22, r24
    1e80:	cd 01       	movw	r24, r26
    1e82:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e86:	dc 01       	movw	r26, r24
    1e88:	cb 01       	movw	r24, r22
    1e8a:	9e 83       	std	Y+6, r25	; 0x06
    1e8c:	8d 83       	std	Y+5, r24	; 0x05
    1e8e:	0f c0       	rjmp	.+30     	; 0x1eae <LCD_voidSendData+0x1e6>
    1e90:	88 ec       	ldi	r24, 0xC8	; 200
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	9c 83       	std	Y+4, r25	; 0x04
    1e96:	8b 83       	std	Y+3, r24	; 0x03
    1e98:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e9c:	01 97       	sbiw	r24, 0x01	; 1
    1e9e:	f1 f7       	brne	.-4      	; 0x1e9c <LCD_voidSendData+0x1d4>
    1ea0:	9c 83       	std	Y+4, r25	; 0x04
    1ea2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ea4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea8:	01 97       	sbiw	r24, 0x01	; 1
    1eaa:	9e 83       	std	Y+6, r25	; 0x06
    1eac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eae:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb0:	9e 81       	ldd	r25, Y+6	; 0x06
    1eb2:	00 97       	sbiw	r24, 0x00	; 0
    1eb4:	69 f7       	brne	.-38     	; 0x1e90 <LCD_voidSendData+0x1c8>
    1eb6:	14 c0       	rjmp	.+40     	; 0x1ee0 <LCD_voidSendData+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eb8:	6f 81       	ldd	r22, Y+7	; 0x07
    1eba:	78 85       	ldd	r23, Y+8	; 0x08
    1ebc:	89 85       	ldd	r24, Y+9	; 0x09
    1ebe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ec0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	cb 01       	movw	r24, r22
    1ec8:	9e 83       	std	Y+6, r25	; 0x06
    1eca:	8d 83       	std	Y+5, r24	; 0x05
    1ecc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ece:	9e 81       	ldd	r25, Y+6	; 0x06
    1ed0:	9a 83       	std	Y+2, r25	; 0x02
    1ed2:	89 83       	std	Y+1, r24	; 0x01
    1ed4:	89 81       	ldd	r24, Y+1	; 0x01
    1ed6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ed8:	01 97       	sbiw	r24, 0x01	; 1
    1eda:	f1 f7       	brne	.-4      	; 0x1ed8 <LCD_voidSendData+0x210>
    1edc:	9a 83       	std	Y+2, r25	; 0x02
    1ede:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);

}
    1ee0:	6d 96       	adiw	r28, 0x1d	; 29
    1ee2:	0f b6       	in	r0, 0x3f	; 63
    1ee4:	f8 94       	cli
    1ee6:	de bf       	out	0x3e, r29	; 62
    1ee8:	0f be       	out	0x3f, r0	; 63
    1eea:	cd bf       	out	0x3d, r28	; 61
    1eec:	cf 91       	pop	r28
    1eee:	df 91       	pop	r29
    1ef0:	08 95       	ret

00001ef2 <LCD_voidSetPosition>:

void LCD_voidSetPosition(u8 u8Row , u8 u8Col)
{
    1ef2:	df 93       	push	r29
    1ef4:	cf 93       	push	r28
    1ef6:	00 d0       	rcall	.+0      	; 0x1ef8 <LCD_voidSetPosition+0x6>
    1ef8:	00 d0       	rcall	.+0      	; 0x1efa <LCD_voidSetPosition+0x8>
    1efa:	cd b7       	in	r28, 0x3d	; 61
    1efc:	de b7       	in	r29, 0x3e	; 62
    1efe:	89 83       	std	Y+1, r24	; 0x01
    1f00:	6a 83       	std	Y+2, r22	; 0x02
	if((u8Row <= LCD_LINE2) && (u8Col <= LCD_COLUM16))
    1f02:	89 81       	ldd	r24, Y+1	; 0x01
    1f04:	82 30       	cpi	r24, 0x02	; 2
    1f06:	d8 f4       	brcc	.+54     	; 0x1f3e <LCD_voidSetPosition+0x4c>
    1f08:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0a:	80 31       	cpi	r24, 0x10	; 16
    1f0c:	c0 f4       	brcc	.+48     	; 0x1f3e <LCD_voidSetPosition+0x4c>
	{
		switch(u8Row)
    1f0e:	89 81       	ldd	r24, Y+1	; 0x01
    1f10:	28 2f       	mov	r18, r24
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	3c 83       	std	Y+4, r19	; 0x04
    1f16:	2b 83       	std	Y+3, r18	; 0x03
    1f18:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1c:	00 97       	sbiw	r24, 0x00	; 0
    1f1e:	31 f0       	breq	.+12     	; 0x1f2c <LCD_voidSetPosition+0x3a>
    1f20:	2b 81       	ldd	r18, Y+3	; 0x03
    1f22:	3c 81       	ldd	r19, Y+4	; 0x04
    1f24:	21 30       	cpi	r18, 0x01	; 1
    1f26:	31 05       	cpc	r19, r1
    1f28:	31 f0       	breq	.+12     	; 0x1f36 <LCD_voidSetPosition+0x44>
    1f2a:	09 c0       	rjmp	.+18     	; 0x1f3e <LCD_voidSetPosition+0x4c>
		{
		case LCD_LINE1: LCD_voidSendCommand(LCD_CURSOR_SET + u8Col); break;
    1f2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2e:	80 58       	subi	r24, 0x80	; 128
    1f30:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <LCD_voidSendCommand>
    1f34:	04 c0       	rjmp	.+8      	; 0x1f3e <LCD_voidSetPosition+0x4c>
		case LCD_LINE2: LCD_voidSendCommand(0xC0 + u8Col);           break;
    1f36:	8a 81       	ldd	r24, Y+2	; 0x02
    1f38:	80 54       	subi	r24, 0x40	; 64
    1f3a:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <LCD_voidSendCommand>
		}
	}

}
    1f3e:	0f 90       	pop	r0
    1f40:	0f 90       	pop	r0
    1f42:	0f 90       	pop	r0
    1f44:	0f 90       	pop	r0
    1f46:	cf 91       	pop	r28
    1f48:	df 91       	pop	r29
    1f4a:	08 95       	ret

00001f4c <LCD_voidSendString>:

void LCD_voidSendString(u8* pu8Str)
{
    1f4c:	df 93       	push	r29
    1f4e:	cf 93       	push	r28
    1f50:	00 d0       	rcall	.+0      	; 0x1f52 <LCD_voidSendString+0x6>
    1f52:	0f 92       	push	r0
    1f54:	cd b7       	in	r28, 0x3d	; 61
    1f56:	de b7       	in	r29, 0x3e	; 62
    1f58:	9b 83       	std	Y+3, r25	; 0x03
    1f5a:	8a 83       	std	Y+2, r24	; 0x02
	u8 u8Iterator = 0;
    1f5c:	19 82       	std	Y+1, r1	; 0x01
    1f5e:	0e c0       	rjmp	.+28     	; 0x1f7c <LCD_voidSendString+0x30>
	while(pu8Str[u8Iterator] != '\0')
	{
		LCD_voidSendData(pu8Str[u8Iterator]);
    1f60:	89 81       	ldd	r24, Y+1	; 0x01
    1f62:	28 2f       	mov	r18, r24
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	8a 81       	ldd	r24, Y+2	; 0x02
    1f68:	9b 81       	ldd	r25, Y+3	; 0x03
    1f6a:	fc 01       	movw	r30, r24
    1f6c:	e2 0f       	add	r30, r18
    1f6e:	f3 1f       	adc	r31, r19
    1f70:	80 81       	ld	r24, Z
    1f72:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <LCD_voidSendData>
		u8Iterator++;
    1f76:	89 81       	ldd	r24, Y+1	; 0x01
    1f78:	8f 5f       	subi	r24, 0xFF	; 255
    1f7a:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidSendString(u8* pu8Str)
{
	u8 u8Iterator = 0;
	while(pu8Str[u8Iterator] != '\0')
    1f7c:	89 81       	ldd	r24, Y+1	; 0x01
    1f7e:	28 2f       	mov	r18, r24
    1f80:	30 e0       	ldi	r19, 0x00	; 0
    1f82:	8a 81       	ldd	r24, Y+2	; 0x02
    1f84:	9b 81       	ldd	r25, Y+3	; 0x03
    1f86:	fc 01       	movw	r30, r24
    1f88:	e2 0f       	add	r30, r18
    1f8a:	f3 1f       	adc	r31, r19
    1f8c:	80 81       	ld	r24, Z
    1f8e:	88 23       	and	r24, r24
    1f90:	39 f7       	brne	.-50     	; 0x1f60 <LCD_voidSendString+0x14>
	{
		LCD_voidSendData(pu8Str[u8Iterator]);
		u8Iterator++;
	}
}
    1f92:	0f 90       	pop	r0
    1f94:	0f 90       	pop	r0
    1f96:	0f 90       	pop	r0
    1f98:	cf 91       	pop	r28
    1f9a:	df 91       	pop	r29
    1f9c:	08 95       	ret

00001f9e <LCD_voidClearDisplay>:

void LCD_voidClearDisplay(void)
{
    1f9e:	df 93       	push	r29
    1fa0:	cf 93       	push	r28
    1fa2:	cd b7       	in	r28, 0x3d	; 61
    1fa4:	de b7       	in	r29, 0x3e	; 62
    1fa6:	2e 97       	sbiw	r28, 0x0e	; 14
    1fa8:	0f b6       	in	r0, 0x3f	; 63
    1faa:	f8 94       	cli
    1fac:	de bf       	out	0x3e, r29	; 62
    1fae:	0f be       	out	0x3f, r0	; 63
    1fb0:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCommand(LCD_CLEAR);
    1fb2:	81 e0       	ldi	r24, 0x01	; 1
    1fb4:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <LCD_voidSendCommand>
    1fb8:	80 e0       	ldi	r24, 0x00	; 0
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	a0 ea       	ldi	r26, 0xA0	; 160
    1fbe:	b0 e4       	ldi	r27, 0x40	; 64
    1fc0:	8b 87       	std	Y+11, r24	; 0x0b
    1fc2:	9c 87       	std	Y+12, r25	; 0x0c
    1fc4:	ad 87       	std	Y+13, r26	; 0x0d
    1fc6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fca:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fcc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fce:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fd0:	20 e0       	ldi	r18, 0x00	; 0
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	4a ef       	ldi	r20, 0xFA	; 250
    1fd6:	54 e4       	ldi	r21, 0x44	; 68
    1fd8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fdc:	dc 01       	movw	r26, r24
    1fde:	cb 01       	movw	r24, r22
    1fe0:	8f 83       	std	Y+7, r24	; 0x07
    1fe2:	98 87       	std	Y+8, r25	; 0x08
    1fe4:	a9 87       	std	Y+9, r26	; 0x09
    1fe6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fe8:	6f 81       	ldd	r22, Y+7	; 0x07
    1fea:	78 85       	ldd	r23, Y+8	; 0x08
    1fec:	89 85       	ldd	r24, Y+9	; 0x09
    1fee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	40 e8       	ldi	r20, 0x80	; 128
    1ff6:	5f e3       	ldi	r21, 0x3F	; 63
    1ff8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ffc:	88 23       	and	r24, r24
    1ffe:	2c f4       	brge	.+10     	; 0x200a <LCD_voidClearDisplay+0x6c>
		__ticks = 1;
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	9e 83       	std	Y+6, r25	; 0x06
    2006:	8d 83       	std	Y+5, r24	; 0x05
    2008:	3f c0       	rjmp	.+126    	; 0x2088 <LCD_voidClearDisplay+0xea>
	else if (__tmp > 65535)
    200a:	6f 81       	ldd	r22, Y+7	; 0x07
    200c:	78 85       	ldd	r23, Y+8	; 0x08
    200e:	89 85       	ldd	r24, Y+9	; 0x09
    2010:	9a 85       	ldd	r25, Y+10	; 0x0a
    2012:	20 e0       	ldi	r18, 0x00	; 0
    2014:	3f ef       	ldi	r19, 0xFF	; 255
    2016:	4f e7       	ldi	r20, 0x7F	; 127
    2018:	57 e4       	ldi	r21, 0x47	; 71
    201a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    201e:	18 16       	cp	r1, r24
    2020:	4c f5       	brge	.+82     	; 0x2074 <LCD_voidClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2022:	6b 85       	ldd	r22, Y+11	; 0x0b
    2024:	7c 85       	ldd	r23, Y+12	; 0x0c
    2026:	8d 85       	ldd	r24, Y+13	; 0x0d
    2028:	9e 85       	ldd	r25, Y+14	; 0x0e
    202a:	20 e0       	ldi	r18, 0x00	; 0
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	40 e2       	ldi	r20, 0x20	; 32
    2030:	51 e4       	ldi	r21, 0x41	; 65
    2032:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2036:	dc 01       	movw	r26, r24
    2038:	cb 01       	movw	r24, r22
    203a:	bc 01       	movw	r22, r24
    203c:	cd 01       	movw	r24, r26
    203e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2042:	dc 01       	movw	r26, r24
    2044:	cb 01       	movw	r24, r22
    2046:	9e 83       	std	Y+6, r25	; 0x06
    2048:	8d 83       	std	Y+5, r24	; 0x05
    204a:	0f c0       	rjmp	.+30     	; 0x206a <LCD_voidClearDisplay+0xcc>
    204c:	88 ec       	ldi	r24, 0xC8	; 200
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	9c 83       	std	Y+4, r25	; 0x04
    2052:	8b 83       	std	Y+3, r24	; 0x03
    2054:	8b 81       	ldd	r24, Y+3	; 0x03
    2056:	9c 81       	ldd	r25, Y+4	; 0x04
    2058:	01 97       	sbiw	r24, 0x01	; 1
    205a:	f1 f7       	brne	.-4      	; 0x2058 <LCD_voidClearDisplay+0xba>
    205c:	9c 83       	std	Y+4, r25	; 0x04
    205e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2060:	8d 81       	ldd	r24, Y+5	; 0x05
    2062:	9e 81       	ldd	r25, Y+6	; 0x06
    2064:	01 97       	sbiw	r24, 0x01	; 1
    2066:	9e 83       	std	Y+6, r25	; 0x06
    2068:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    206a:	8d 81       	ldd	r24, Y+5	; 0x05
    206c:	9e 81       	ldd	r25, Y+6	; 0x06
    206e:	00 97       	sbiw	r24, 0x00	; 0
    2070:	69 f7       	brne	.-38     	; 0x204c <LCD_voidClearDisplay+0xae>
    2072:	14 c0       	rjmp	.+40     	; 0x209c <LCD_voidClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2074:	6f 81       	ldd	r22, Y+7	; 0x07
    2076:	78 85       	ldd	r23, Y+8	; 0x08
    2078:	89 85       	ldd	r24, Y+9	; 0x09
    207a:	9a 85       	ldd	r25, Y+10	; 0x0a
    207c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2080:	dc 01       	movw	r26, r24
    2082:	cb 01       	movw	r24, r22
    2084:	9e 83       	std	Y+6, r25	; 0x06
    2086:	8d 83       	std	Y+5, r24	; 0x05
    2088:	8d 81       	ldd	r24, Y+5	; 0x05
    208a:	9e 81       	ldd	r25, Y+6	; 0x06
    208c:	9a 83       	std	Y+2, r25	; 0x02
    208e:	89 83       	std	Y+1, r24	; 0x01
    2090:	89 81       	ldd	r24, Y+1	; 0x01
    2092:	9a 81       	ldd	r25, Y+2	; 0x02
    2094:	01 97       	sbiw	r24, 0x01	; 1
    2096:	f1 f7       	brne	.-4      	; 0x2094 <LCD_voidClearDisplay+0xf6>
    2098:	9a 83       	std	Y+2, r25	; 0x02
    209a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    209c:	2e 96       	adiw	r28, 0x0e	; 14
    209e:	0f b6       	in	r0, 0x3f	; 63
    20a0:	f8 94       	cli
    20a2:	de bf       	out	0x3e, r29	; 62
    20a4:	0f be       	out	0x3f, r0	; 63
    20a6:	cd bf       	out	0x3d, r28	; 61
    20a8:	cf 91       	pop	r28
    20aa:	df 91       	pop	r29
    20ac:	08 95       	ret

000020ae <LCD_voidClearLine>:

void LCD_voidClearLine(u8 u8LineNum)
{
    20ae:	df 93       	push	r29
    20b0:	cf 93       	push	r28
    20b2:	00 d0       	rcall	.+0      	; 0x20b4 <LCD_voidClearLine+0x6>
    20b4:	0f 92       	push	r0
    20b6:	cd b7       	in	r28, 0x3d	; 61
    20b8:	de b7       	in	r29, 0x3e	; 62
    20ba:	89 83       	std	Y+1, r24	; 0x01

	if(u8LineNum <= LCD_LINE2)
    20bc:	89 81       	ldd	r24, Y+1	; 0x01
    20be:	82 30       	cpi	r24, 0x02	; 2
    20c0:	e0 f4       	brcc	.+56     	; 0x20fa <LCD_voidClearLine+0x4c>
	{
		LCD_voidSetPosition(u8LineNum , LCD_COLUM1); // set cursor position on LineNum first column
    20c2:	89 81       	ldd	r24, Y+1	; 0x01
    20c4:	60 e0       	ldi	r22, 0x00	; 0
    20c6:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_voidSetPosition>
		switch(u8LineNum)
    20ca:	89 81       	ldd	r24, Y+1	; 0x01
    20cc:	28 2f       	mov	r18, r24
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	3b 83       	std	Y+3, r19	; 0x03
    20d2:	2a 83       	std	Y+2, r18	; 0x02
    20d4:	8a 81       	ldd	r24, Y+2	; 0x02
    20d6:	9b 81       	ldd	r25, Y+3	; 0x03
    20d8:	00 97       	sbiw	r24, 0x00	; 0
    20da:	31 f0       	breq	.+12     	; 0x20e8 <LCD_voidClearLine+0x3a>
    20dc:	2a 81       	ldd	r18, Y+2	; 0x02
    20de:	3b 81       	ldd	r19, Y+3	; 0x03
    20e0:	21 30       	cpi	r18, 0x01	; 1
    20e2:	31 05       	cpc	r19, r1
    20e4:	31 f0       	breq	.+12     	; 0x20f2 <LCD_voidClearLine+0x44>
    20e6:	09 c0       	rjmp	.+18     	; 0x20fa <LCD_voidClearLine+0x4c>
		{
		case LCD_LINE1: LCD_voidSendString("                "); break;
    20e8:	80 e6       	ldi	r24, 0x60	; 96
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <LCD_voidSendString>
    20f0:	04 c0       	rjmp	.+8      	; 0x20fa <LCD_voidClearLine+0x4c>
		case LCD_LINE2: LCD_voidSendString("                "); break;
    20f2:	80 e6       	ldi	r24, 0x60	; 96
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <LCD_voidSendString>
		}
	}
}
    20fa:	0f 90       	pop	r0
    20fc:	0f 90       	pop	r0
    20fe:	0f 90       	pop	r0
    2100:	cf 91       	pop	r28
    2102:	df 91       	pop	r29
    2104:	08 95       	ret

00002106 <LCD_voidCreateChar>:

void LCD_voidCreateChar(u8* pu8CustomChar , u8 u8CharLocation)
{
    2106:	df 93       	push	r29
    2108:	cf 93       	push	r28
    210a:	00 d0       	rcall	.+0      	; 0x210c <LCD_voidCreateChar+0x6>
    210c:	00 d0       	rcall	.+0      	; 0x210e <LCD_voidCreateChar+0x8>
    210e:	cd b7       	in	r28, 0x3d	; 61
    2110:	de b7       	in	r29, 0x3e	; 62
    2112:	9b 83       	std	Y+3, r25	; 0x03
    2114:	8a 83       	std	Y+2, r24	; 0x02
    2116:	6c 83       	std	Y+4, r22	; 0x04
	u8 u8Iterator;
	if(u8CharLocation <= LCD_CUSTOM_CHAR8)
    2118:	8c 81       	ldd	r24, Y+4	; 0x04
    211a:	88 30       	cpi	r24, 0x08	; 8
    211c:	f8 f4       	brcc	.+62     	; 0x215c <LCD_voidCreateChar+0x56>
	{
		LCD_voidSendCommand((u8CharLocation * 8) + 0x40);   // 0x40 is the first location in CGRAM every location 8bit
    211e:	8c 81       	ldd	r24, Y+4	; 0x04
    2120:	88 2f       	mov	r24, r24
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	08 96       	adiw	r24, 0x08	; 8
    2126:	88 0f       	add	r24, r24
    2128:	99 1f       	adc	r25, r25
    212a:	88 0f       	add	r24, r24
    212c:	99 1f       	adc	r25, r25
    212e:	88 0f       	add	r24, r24
    2130:	99 1f       	adc	r25, r25
    2132:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <LCD_voidSendCommand>
		for(u8Iterator = 0 ; u8Iterator < 8 ; u8Iterator++)
    2136:	19 82       	std	Y+1, r1	; 0x01
    2138:	0e c0       	rjmp	.+28     	; 0x2156 <LCD_voidCreateChar+0x50>
		{
			LCD_voidSendData(pu8CustomChar[u8Iterator]);
    213a:	89 81       	ldd	r24, Y+1	; 0x01
    213c:	28 2f       	mov	r18, r24
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	8a 81       	ldd	r24, Y+2	; 0x02
    2142:	9b 81       	ldd	r25, Y+3	; 0x03
    2144:	fc 01       	movw	r30, r24
    2146:	e2 0f       	add	r30, r18
    2148:	f3 1f       	adc	r31, r19
    214a:	80 81       	ld	r24, Z
    214c:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <LCD_voidSendData>
{
	u8 u8Iterator;
	if(u8CharLocation <= LCD_CUSTOM_CHAR8)
	{
		LCD_voidSendCommand((u8CharLocation * 8) + 0x40);   // 0x40 is the first location in CGRAM every location 8bit
		for(u8Iterator = 0 ; u8Iterator < 8 ; u8Iterator++)
    2150:	89 81       	ldd	r24, Y+1	; 0x01
    2152:	8f 5f       	subi	r24, 0xFF	; 255
    2154:	89 83       	std	Y+1, r24	; 0x01
    2156:	89 81       	ldd	r24, Y+1	; 0x01
    2158:	88 30       	cpi	r24, 0x08	; 8
    215a:	78 f3       	brcs	.-34     	; 0x213a <LCD_voidCreateChar+0x34>
		{
			LCD_voidSendData(pu8CustomChar[u8Iterator]);
		}
	}

}
    215c:	0f 90       	pop	r0
    215e:	0f 90       	pop	r0
    2160:	0f 90       	pop	r0
    2162:	0f 90       	pop	r0
    2164:	cf 91       	pop	r28
    2166:	df 91       	pop	r29
    2168:	08 95       	ret

0000216a <LCD_voidSendIntager>:

void LCD_voidSendIntager(u32 u32IntData)
{
    216a:	df 93       	push	r29
    216c:	cf 93       	push	r28
    216e:	cd b7       	in	r28, 0x3d	; 61
    2170:	de b7       	in	r29, 0x3e	; 62
    2172:	6d 97       	sbiw	r28, 0x1d	; 29
    2174:	0f b6       	in	r0, 0x3f	; 63
    2176:	f8 94       	cli
    2178:	de bf       	out	0x3e, r29	; 62
    217a:	0f be       	out	0x3f, r0	; 63
    217c:	cd bf       	out	0x3d, r28	; 61
    217e:	6a 8f       	std	Y+26, r22	; 0x1a
    2180:	7b 8f       	std	Y+27, r23	; 0x1b
    2182:	8c 8f       	std	Y+28, r24	; 0x1c
    2184:	9d 8f       	std	Y+29, r25	; 0x1d
	u8 au8IntToCharConvert[NUMBER_OF_DIGITS]= {};
    2186:	89 e0       	ldi	r24, 0x09	; 9
    2188:	fe 01       	movw	r30, r28
    218a:	71 96       	adiw	r30, 0x11	; 17
    218c:	df 01       	movw	r26, r30
    218e:	98 2f       	mov	r25, r24
    2190:	1d 92       	st	X+, r1
    2192:	9a 95       	dec	r25
    2194:	e9 f7       	brne	.-6      	; 0x2190 <LCD_voidSendIntager+0x26>
	u8 u8Iterator;
	u8 u8Quotient;
	u8 u8LastIndex;    //Number of Entry Digits
	u8 u8Flag = 1;    //For Get u8LastIndex
    2196:	81 e0       	ldi	r24, 0x01	; 1
    2198:	8d 87       	std	Y+13, r24	; 0x0d
	u32 u32Remainder;
	u32 u32Divisor;

	for(u8Iterator = NUMBER_OF_DIGITS ; u8Iterator >= 1 ; u8Iterator--)
    219a:	89 e0       	ldi	r24, 0x09	; 9
    219c:	88 8b       	std	Y+16, r24	; 0x10
    219e:	2d c1       	rjmp	.+602    	; 0x23fa <LCD_voidSendIntager+0x290>
	{
		u32Divisor = u32Power(10,u8Iterator);
    21a0:	8a e0       	ldi	r24, 0x0A	; 10
    21a2:	68 89       	ldd	r22, Y+16	; 0x10
    21a4:	0e 94 11 12 	call	0x2422	; 0x2422 <u32Power>
    21a8:	dc 01       	movw	r26, r24
    21aa:	cb 01       	movw	r24, r22
    21ac:	8d 83       	std	Y+5, r24	; 0x05
    21ae:	9e 83       	std	Y+6, r25	; 0x06
    21b0:	af 83       	std	Y+7, r26	; 0x07
    21b2:	b8 87       	std	Y+8, r27	; 0x08
		/********Get Number of Digits For Entry Number******/
		if(u32IntData < u32Divisor)
    21b4:	2a 8d       	ldd	r18, Y+26	; 0x1a
    21b6:	3b 8d       	ldd	r19, Y+27	; 0x1b
    21b8:	4c 8d       	ldd	r20, Y+28	; 0x1c
    21ba:	5d 8d       	ldd	r21, Y+29	; 0x1d
    21bc:	8d 81       	ldd	r24, Y+5	; 0x05
    21be:	9e 81       	ldd	r25, Y+6	; 0x06
    21c0:	af 81       	ldd	r26, Y+7	; 0x07
    21c2:	b8 85       	ldd	r27, Y+8	; 0x08
    21c4:	28 17       	cp	r18, r24
    21c6:	39 07       	cpc	r19, r25
    21c8:	4a 07       	cpc	r20, r26
    21ca:	5b 07       	cpc	r21, r27
    21cc:	08 f4       	brcc	.+2      	; 0x21d0 <LCD_voidSendIntager+0x66>
    21ce:	12 c1       	rjmp	.+548    	; 0x23f4 <LCD_voidSendIntager+0x28a>
		{
			continue;
		}
		else
		{
			if(u8Flag == 1)
    21d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    21d2:	81 30       	cpi	r24, 0x01	; 1
    21d4:	11 f4       	brne	.+4      	; 0x21da <LCD_voidSendIntager+0x70>
			{
				u8LastIndex = u8Iterator;
    21d6:	88 89       	ldd	r24, Y+16	; 0x10
    21d8:	8e 87       	std	Y+14, r24	; 0x0e
			}
			u8Flag = 0;
    21da:	1d 86       	std	Y+13, r1	; 0x0d
			u8Quotient  = u32IntData / u32Divisor;
    21dc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    21de:	9b 8d       	ldd	r25, Y+27	; 0x1b
    21e0:	ac 8d       	ldd	r26, Y+28	; 0x1c
    21e2:	bd 8d       	ldd	r27, Y+29	; 0x1d
    21e4:	2d 81       	ldd	r18, Y+5	; 0x05
    21e6:	3e 81       	ldd	r19, Y+6	; 0x06
    21e8:	4f 81       	ldd	r20, Y+7	; 0x07
    21ea:	58 85       	ldd	r21, Y+8	; 0x08
    21ec:	bc 01       	movw	r22, r24
    21ee:	cd 01       	movw	r24, r26
    21f0:	0e 94 6d 13 	call	0x26da	; 0x26da <__udivmodsi4>
    21f4:	da 01       	movw	r26, r20
    21f6:	c9 01       	movw	r24, r18
    21f8:	8f 87       	std	Y+15, r24	; 0x0f
			u32 u32Remainder = u32IntData % u32Divisor;
    21fa:	8a 8d       	ldd	r24, Y+26	; 0x1a
    21fc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    21fe:	ac 8d       	ldd	r26, Y+28	; 0x1c
    2200:	bd 8d       	ldd	r27, Y+29	; 0x1d
    2202:	2d 81       	ldd	r18, Y+5	; 0x05
    2204:	3e 81       	ldd	r19, Y+6	; 0x06
    2206:	4f 81       	ldd	r20, Y+7	; 0x07
    2208:	58 85       	ldd	r21, Y+8	; 0x08
    220a:	bc 01       	movw	r22, r24
    220c:	cd 01       	movw	r24, r26
    220e:	0e 94 6d 13 	call	0x26da	; 0x26da <__udivmodsi4>
    2212:	dc 01       	movw	r26, r24
    2214:	cb 01       	movw	r24, r22
    2216:	89 83       	std	Y+1, r24	; 0x01
    2218:	9a 83       	std	Y+2, r25	; 0x02
    221a:	ab 83       	std	Y+3, r26	; 0x03
    221c:	bc 83       	std	Y+4, r27	; 0x04
			/*************Print Multiples of 10*************/
			if((u32Remainder == 0) && (u8Iterator >= 1))
    221e:	89 81       	ldd	r24, Y+1	; 0x01
    2220:	9a 81       	ldd	r25, Y+2	; 0x02
    2222:	ab 81       	ldd	r26, Y+3	; 0x03
    2224:	bc 81       	ldd	r27, Y+4	; 0x04
    2226:	00 97       	sbiw	r24, 0x00	; 0
    2228:	a1 05       	cpc	r26, r1
    222a:	b1 05       	cpc	r27, r1
    222c:	79 f5       	brne	.+94     	; 0x228c <LCD_voidSendIntager+0x122>
    222e:	88 89       	ldd	r24, Y+16	; 0x10
    2230:	88 23       	and	r24, r24
    2232:	61 f1       	breq	.+88     	; 0x228c <LCD_voidSendIntager+0x122>
			{
				au8IntToCharConvert[u8LastIndex - u8Iterator] = u8Quotient +'0';
    2234:	8e 85       	ldd	r24, Y+14	; 0x0e
    2236:	28 2f       	mov	r18, r24
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	88 89       	ldd	r24, Y+16	; 0x10
    223c:	88 2f       	mov	r24, r24
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	28 1b       	sub	r18, r24
    2242:	39 0b       	sbc	r19, r25
    2244:	8f 85       	ldd	r24, Y+15	; 0x0f
    2246:	48 2f       	mov	r20, r24
    2248:	40 5d       	subi	r20, 0xD0	; 208
    224a:	ce 01       	movw	r24, r28
    224c:	41 96       	adiw	r24, 0x11	; 17
    224e:	fc 01       	movw	r30, r24
    2250:	e2 0f       	add	r30, r18
    2252:	f3 1f       	adc	r31, r19
    2254:	40 83       	st	Z, r20
    2256:	12 c0       	rjmp	.+36     	; 0x227c <LCD_voidSendIntager+0x112>
				while(u8Iterator != 0)
				{
					u8Iterator --;
    2258:	88 89       	ldd	r24, Y+16	; 0x10
    225a:	81 50       	subi	r24, 0x01	; 1
    225c:	88 8b       	std	Y+16, r24	; 0x10
					au8IntToCharConvert[u8LastIndex - u8Iterator] = '0';
    225e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2260:	28 2f       	mov	r18, r24
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	88 89       	ldd	r24, Y+16	; 0x10
    2266:	88 2f       	mov	r24, r24
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	28 1b       	sub	r18, r24
    226c:	39 0b       	sbc	r19, r25
    226e:	ce 01       	movw	r24, r28
    2270:	41 96       	adiw	r24, 0x11	; 17
    2272:	fc 01       	movw	r30, r24
    2274:	e2 0f       	add	r30, r18
    2276:	f3 1f       	adc	r31, r19
    2278:	80 e3       	ldi	r24, 0x30	; 48
    227a:	80 83       	st	Z, r24
			u32 u32Remainder = u32IntData % u32Divisor;
			/*************Print Multiples of 10*************/
			if((u32Remainder == 0) && (u8Iterator >= 1))
			{
				au8IntToCharConvert[u8LastIndex - u8Iterator] = u8Quotient +'0';
				while(u8Iterator != 0)
    227c:	88 89       	ldd	r24, Y+16	; 0x10
    227e:	88 23       	and	r24, r24
    2280:	59 f7       	brne	.-42     	; 0x2258 <LCD_voidSendIntager+0xee>
				{
					u8Iterator --;
					au8IntToCharConvert[u8LastIndex - u8Iterator] = '0';
				}
				LCD_voidSendString(au8IntToCharConvert);
    2282:	ce 01       	movw	r24, r28
    2284:	41 96       	adiw	r24, 0x11	; 17
    2286:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <LCD_voidSendString>
    228a:	bb c0       	rjmp	.+374    	; 0x2402 <LCD_voidSendIntager+0x298>
				break;
			}
			/************Print 0 in Middle of Number**********/
			if(u32Remainder < (u32Divisor /10))
    228c:	8d 81       	ldd	r24, Y+5	; 0x05
    228e:	9e 81       	ldd	r25, Y+6	; 0x06
    2290:	af 81       	ldd	r26, Y+7	; 0x07
    2292:	b8 85       	ldd	r27, Y+8	; 0x08
    2294:	2a e0       	ldi	r18, 0x0A	; 10
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	40 e0       	ldi	r20, 0x00	; 0
    229a:	50 e0       	ldi	r21, 0x00	; 0
    229c:	bc 01       	movw	r22, r24
    229e:	cd 01       	movw	r24, r26
    22a0:	0e 94 6d 13 	call	0x26da	; 0x26da <__udivmodsi4>
    22a4:	da 01       	movw	r26, r20
    22a6:	c9 01       	movw	r24, r18
    22a8:	9c 01       	movw	r18, r24
    22aa:	ad 01       	movw	r20, r26
    22ac:	89 81       	ldd	r24, Y+1	; 0x01
    22ae:	9a 81       	ldd	r25, Y+2	; 0x02
    22b0:	ab 81       	ldd	r26, Y+3	; 0x03
    22b2:	bc 81       	ldd	r27, Y+4	; 0x04
    22b4:	82 17       	cp	r24, r18
    22b6:	93 07       	cpc	r25, r19
    22b8:	a4 07       	cpc	r26, r20
    22ba:	b5 07       	cpc	r27, r21
    22bc:	08 f0       	brcs	.+2      	; 0x22c0 <LCD_voidSendIntager+0x156>
    22be:	6c c0       	rjmp	.+216    	; 0x2398 <LCD_voidSendIntager+0x22e>
			{
				au8IntToCharConvert[u8LastIndex - u8Iterator] = u8Quotient +'0';
    22c0:	8e 85       	ldd	r24, Y+14	; 0x0e
    22c2:	28 2f       	mov	r18, r24
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	88 89       	ldd	r24, Y+16	; 0x10
    22c8:	88 2f       	mov	r24, r24
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	28 1b       	sub	r18, r24
    22ce:	39 0b       	sbc	r19, r25
    22d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    22d2:	48 2f       	mov	r20, r24
    22d4:	40 5d       	subi	r20, 0xD0	; 208
    22d6:	ce 01       	movw	r24, r28
    22d8:	41 96       	adiw	r24, 0x11	; 17
    22da:	fc 01       	movw	r30, r24
    22dc:	e2 0f       	add	r30, r18
    22de:	f3 1f       	adc	r31, r19
    22e0:	40 83       	st	Z, r20
    22e2:	24 c0       	rjmp	.+72     	; 0x232c <LCD_voidSendIntager+0x1c2>
				while(u32Remainder < (u32Divisor /10))
				{
					u8Iterator--;
    22e4:	88 89       	ldd	r24, Y+16	; 0x10
    22e6:	81 50       	subi	r24, 0x01	; 1
    22e8:	88 8b       	std	Y+16, r24	; 0x10
					u32Divisor /= 10;
    22ea:	8d 81       	ldd	r24, Y+5	; 0x05
    22ec:	9e 81       	ldd	r25, Y+6	; 0x06
    22ee:	af 81       	ldd	r26, Y+7	; 0x07
    22f0:	b8 85       	ldd	r27, Y+8	; 0x08
    22f2:	2a e0       	ldi	r18, 0x0A	; 10
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	40 e0       	ldi	r20, 0x00	; 0
    22f8:	50 e0       	ldi	r21, 0x00	; 0
    22fa:	bc 01       	movw	r22, r24
    22fc:	cd 01       	movw	r24, r26
    22fe:	0e 94 6d 13 	call	0x26da	; 0x26da <__udivmodsi4>
    2302:	da 01       	movw	r26, r20
    2304:	c9 01       	movw	r24, r18
    2306:	8d 83       	std	Y+5, r24	; 0x05
    2308:	9e 83       	std	Y+6, r25	; 0x06
    230a:	af 83       	std	Y+7, r26	; 0x07
    230c:	b8 87       	std	Y+8, r27	; 0x08
					au8IntToCharConvert[u8LastIndex - u8Iterator] = '0';
    230e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2310:	28 2f       	mov	r18, r24
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	88 89       	ldd	r24, Y+16	; 0x10
    2316:	88 2f       	mov	r24, r24
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	28 1b       	sub	r18, r24
    231c:	39 0b       	sbc	r19, r25
    231e:	ce 01       	movw	r24, r28
    2320:	41 96       	adiw	r24, 0x11	; 17
    2322:	fc 01       	movw	r30, r24
    2324:	e2 0f       	add	r30, r18
    2326:	f3 1f       	adc	r31, r19
    2328:	80 e3       	ldi	r24, 0x30	; 48
    232a:	80 83       	st	Z, r24
			}
			/************Print 0 in Middle of Number**********/
			if(u32Remainder < (u32Divisor /10))
			{
				au8IntToCharConvert[u8LastIndex - u8Iterator] = u8Quotient +'0';
				while(u32Remainder < (u32Divisor /10))
    232c:	8d 81       	ldd	r24, Y+5	; 0x05
    232e:	9e 81       	ldd	r25, Y+6	; 0x06
    2330:	af 81       	ldd	r26, Y+7	; 0x07
    2332:	b8 85       	ldd	r27, Y+8	; 0x08
    2334:	2a e0       	ldi	r18, 0x0A	; 10
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	40 e0       	ldi	r20, 0x00	; 0
    233a:	50 e0       	ldi	r21, 0x00	; 0
    233c:	bc 01       	movw	r22, r24
    233e:	cd 01       	movw	r24, r26
    2340:	0e 94 6d 13 	call	0x26da	; 0x26da <__udivmodsi4>
    2344:	da 01       	movw	r26, r20
    2346:	c9 01       	movw	r24, r18
    2348:	9c 01       	movw	r18, r24
    234a:	ad 01       	movw	r20, r26
    234c:	89 81       	ldd	r24, Y+1	; 0x01
    234e:	9a 81       	ldd	r25, Y+2	; 0x02
    2350:	ab 81       	ldd	r26, Y+3	; 0x03
    2352:	bc 81       	ldd	r27, Y+4	; 0x04
    2354:	82 17       	cp	r24, r18
    2356:	93 07       	cpc	r25, r19
    2358:	a4 07       	cpc	r26, r20
    235a:	b5 07       	cpc	r27, r21
    235c:	18 f2       	brcs	.-122    	; 0x22e4 <LCD_voidSendIntager+0x17a>
				{
					u8Iterator--;
					u32Divisor /= 10;
					au8IntToCharConvert[u8LastIndex - u8Iterator] = '0';
				}
				if(u8Iterator > 1)
    235e:	88 89       	ldd	r24, Y+16	; 0x10
    2360:	82 30       	cpi	r24, 0x02	; 2
    2362:	48 f0       	brcs	.+18     	; 0x2376 <LCD_voidSendIntager+0x20c>
				{
					u32IntData = u32Remainder;
    2364:	89 81       	ldd	r24, Y+1	; 0x01
    2366:	9a 81       	ldd	r25, Y+2	; 0x02
    2368:	ab 81       	ldd	r26, Y+3	; 0x03
    236a:	bc 81       	ldd	r27, Y+4	; 0x04
    236c:	8a 8f       	std	Y+26, r24	; 0x1a
    236e:	9b 8f       	std	Y+27, r25	; 0x1b
    2370:	ac 8f       	std	Y+28, r26	; 0x1c
    2372:	bd 8f       	std	Y+29, r27	; 0x1d
    2374:	3f c0       	rjmp	.+126    	; 0x23f4 <LCD_voidSendIntager+0x28a>
					continue;
				}
				else
				{
					au8IntToCharConvert[u8LastIndex] = u32Remainder + '0';
    2376:	8e 85       	ldd	r24, Y+14	; 0x0e
    2378:	28 2f       	mov	r18, r24
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	89 81       	ldd	r24, Y+1	; 0x01
    237e:	48 2f       	mov	r20, r24
    2380:	40 5d       	subi	r20, 0xD0	; 208
    2382:	ce 01       	movw	r24, r28
    2384:	41 96       	adiw	r24, 0x11	; 17
    2386:	fc 01       	movw	r30, r24
    2388:	e2 0f       	add	r30, r18
    238a:	f3 1f       	adc	r31, r19
    238c:	40 83       	st	Z, r20
					LCD_voidSendString(au8IntToCharConvert);
    238e:	ce 01       	movw	r24, r28
    2390:	41 96       	adiw	r24, 0x11	; 17
    2392:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <LCD_voidSendString>
    2396:	35 c0       	rjmp	.+106    	; 0x2402 <LCD_voidSendIntager+0x298>
					break;
				}

			}
			/* print Normal Number without zeros in it*/
			au8IntToCharConvert[u8LastIndex - u8Iterator] = u8Quotient +'0';
    2398:	8e 85       	ldd	r24, Y+14	; 0x0e
    239a:	28 2f       	mov	r18, r24
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	88 89       	ldd	r24, Y+16	; 0x10
    23a0:	88 2f       	mov	r24, r24
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	28 1b       	sub	r18, r24
    23a6:	39 0b       	sbc	r19, r25
    23a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    23aa:	48 2f       	mov	r20, r24
    23ac:	40 5d       	subi	r20, 0xD0	; 208
    23ae:	ce 01       	movw	r24, r28
    23b0:	41 96       	adiw	r24, 0x11	; 17
    23b2:	fc 01       	movw	r30, r24
    23b4:	e2 0f       	add	r30, r18
    23b6:	f3 1f       	adc	r31, r19
    23b8:	40 83       	st	Z, r20
			if(u8Iterator > 1)
    23ba:	88 89       	ldd	r24, Y+16	; 0x10
    23bc:	82 30       	cpi	r24, 0x02	; 2
    23be:	48 f0       	brcs	.+18     	; 0x23d2 <LCD_voidSendIntager+0x268>
			{
				u32IntData = u32Remainder;
    23c0:	89 81       	ldd	r24, Y+1	; 0x01
    23c2:	9a 81       	ldd	r25, Y+2	; 0x02
    23c4:	ab 81       	ldd	r26, Y+3	; 0x03
    23c6:	bc 81       	ldd	r27, Y+4	; 0x04
    23c8:	8a 8f       	std	Y+26, r24	; 0x1a
    23ca:	9b 8f       	std	Y+27, r25	; 0x1b
    23cc:	ac 8f       	std	Y+28, r26	; 0x1c
    23ce:	bd 8f       	std	Y+29, r27	; 0x1d
    23d0:	11 c0       	rjmp	.+34     	; 0x23f4 <LCD_voidSendIntager+0x28a>
				continue;
			}
			else
			{
				au8IntToCharConvert[u8LastIndex] = u32Remainder + '0';
    23d2:	8e 85       	ldd	r24, Y+14	; 0x0e
    23d4:	28 2f       	mov	r18, r24
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	89 81       	ldd	r24, Y+1	; 0x01
    23da:	48 2f       	mov	r20, r24
    23dc:	40 5d       	subi	r20, 0xD0	; 208
    23de:	ce 01       	movw	r24, r28
    23e0:	41 96       	adiw	r24, 0x11	; 17
    23e2:	fc 01       	movw	r30, r24
    23e4:	e2 0f       	add	r30, r18
    23e6:	f3 1f       	adc	r31, r19
    23e8:	40 83       	st	Z, r20
				//au8IntToCharConvert[u8LastIndex +1] = '\0';
				LCD_voidSendString(au8IntToCharConvert);
    23ea:	ce 01       	movw	r24, r28
    23ec:	41 96       	adiw	r24, 0x11	; 17
    23ee:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <LCD_voidSendString>
    23f2:	07 c0       	rjmp	.+14     	; 0x2402 <LCD_voidSendIntager+0x298>
	u8 u8LastIndex;    //Number of Entry Digits
	u8 u8Flag = 1;    //For Get u8LastIndex
	u32 u32Remainder;
	u32 u32Divisor;

	for(u8Iterator = NUMBER_OF_DIGITS ; u8Iterator >= 1 ; u8Iterator--)
    23f4:	88 89       	ldd	r24, Y+16	; 0x10
    23f6:	81 50       	subi	r24, 0x01	; 1
    23f8:	88 8b       	std	Y+16, r24	; 0x10
    23fa:	88 89       	ldd	r24, Y+16	; 0x10
    23fc:	88 23       	and	r24, r24
    23fe:	09 f0       	breq	.+2      	; 0x2402 <LCD_voidSendIntager+0x298>
    2400:	cf ce       	rjmp	.-610    	; 0x21a0 <LCD_voidSendIntager+0x36>
				break;
			}
		}
	}
	/* print Integer Number if it has One Digit */
	if(u8Flag == 1)
    2402:	8d 85       	ldd	r24, Y+13	; 0x0d
    2404:	81 30       	cpi	r24, 0x01	; 1
    2406:	21 f4       	brne	.+8      	; 0x2410 <LCD_voidSendIntager+0x2a6>
	{
		LCD_voidSendData((u32IntData + '0'));
    2408:	8a 8d       	ldd	r24, Y+26	; 0x1a
    240a:	80 5d       	subi	r24, 0xD0	; 208
    240c:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <LCD_voidSendData>
	}

}
    2410:	6d 96       	adiw	r28, 0x1d	; 29
    2412:	0f b6       	in	r0, 0x3f	; 63
    2414:	f8 94       	cli
    2416:	de bf       	out	0x3e, r29	; 62
    2418:	0f be       	out	0x3f, r0	; 63
    241a:	cd bf       	out	0x3d, r28	; 61
    241c:	cf 91       	pop	r28
    241e:	df 91       	pop	r29
    2420:	08 95       	ret

00002422 <u32Power>:

u32 u32Power(u8 u8Base , u8 u8Exp)
{
    2422:	df 93       	push	r29
    2424:	cf 93       	push	r28
    2426:	00 d0       	rcall	.+0      	; 0x2428 <u32Power+0x6>
    2428:	00 d0       	rcall	.+0      	; 0x242a <u32Power+0x8>
    242a:	00 d0       	rcall	.+0      	; 0x242c <u32Power+0xa>
    242c:	cd b7       	in	r28, 0x3d	; 61
    242e:	de b7       	in	r29, 0x3e	; 62
    2430:	8d 83       	std	Y+5, r24	; 0x05
    2432:	6e 83       	std	Y+6, r22	; 0x06
	u32 u32Result = 1;
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	a0 e0       	ldi	r26, 0x00	; 0
    243a:	b0 e0       	ldi	r27, 0x00	; 0
    243c:	89 83       	std	Y+1, r24	; 0x01
    243e:	9a 83       	std	Y+2, r25	; 0x02
    2440:	ab 83       	std	Y+3, r26	; 0x03
    2442:	bc 83       	std	Y+4, r27	; 0x04
    2444:	16 c0       	rjmp	.+44     	; 0x2472 <u32Power+0x50>
	while (u8Exp != 0)
	{
		u32Result *= u8Base;
    2446:	8d 81       	ldd	r24, Y+5	; 0x05
    2448:	28 2f       	mov	r18, r24
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	40 e0       	ldi	r20, 0x00	; 0
    244e:	50 e0       	ldi	r21, 0x00	; 0
    2450:	89 81       	ldd	r24, Y+1	; 0x01
    2452:	9a 81       	ldd	r25, Y+2	; 0x02
    2454:	ab 81       	ldd	r26, Y+3	; 0x03
    2456:	bc 81       	ldd	r27, Y+4	; 0x04
    2458:	bc 01       	movw	r22, r24
    245a:	cd 01       	movw	r24, r26
    245c:	0e 94 4e 13 	call	0x269c	; 0x269c <__mulsi3>
    2460:	dc 01       	movw	r26, r24
    2462:	cb 01       	movw	r24, r22
    2464:	89 83       	std	Y+1, r24	; 0x01
    2466:	9a 83       	std	Y+2, r25	; 0x02
    2468:	ab 83       	std	Y+3, r26	; 0x03
    246a:	bc 83       	std	Y+4, r27	; 0x04
		u8Exp--;
    246c:	8e 81       	ldd	r24, Y+6	; 0x06
    246e:	81 50       	subi	r24, 0x01	; 1
    2470:	8e 83       	std	Y+6, r24	; 0x06
}

u32 u32Power(u8 u8Base , u8 u8Exp)
{
	u32 u32Result = 1;
	while (u8Exp != 0)
    2472:	8e 81       	ldd	r24, Y+6	; 0x06
    2474:	88 23       	and	r24, r24
    2476:	39 f7       	brne	.-50     	; 0x2446 <u32Power+0x24>
	{
		u32Result *= u8Base;
		u8Exp--;
	}
	return u32Result;
    2478:	89 81       	ldd	r24, Y+1	; 0x01
    247a:	9a 81       	ldd	r25, Y+2	; 0x02
    247c:	ab 81       	ldd	r26, Y+3	; 0x03
    247e:	bc 81       	ldd	r27, Y+4	; 0x04
}
    2480:	bc 01       	movw	r22, r24
    2482:	cd 01       	movw	r24, r26
    2484:	26 96       	adiw	r28, 0x06	; 6
    2486:	0f b6       	in	r0, 0x3f	; 63
    2488:	f8 94       	cli
    248a:	de bf       	out	0x3e, r29	; 62
    248c:	0f be       	out	0x3f, r0	; 63
    248e:	cd bf       	out	0x3d, r28	; 61
    2490:	cf 91       	pop	r28
    2492:	df 91       	pop	r29
    2494:	08 95       	ret

00002496 <main>:
#include "KPD_interface.h"
#include "CALC_interface.h"


void main()
{
    2496:	0f 93       	push	r16
    2498:	df 93       	push	r29
    249a:	cf 93       	push	r28
    249c:	cd b7       	in	r28, 0x3d	; 61
    249e:	de b7       	in	r29, 0x3e	; 62
    24a0:	a0 97       	sbiw	r28, 0x20	; 32
    24a2:	0f b6       	in	r0, 0x3f	; 63
    24a4:	f8 94       	cli
    24a6:	de bf       	out	0x3e, r29	; 62
    24a8:	0f be       	out	0x3f, r0	; 63
    24aa:	cd bf       	out	0x3d, r28	; 61
	//INITIALIZATION
	/* Local Variable Initialization */
	u8 au8Operand1[OPERANDS_SIZE];             //ArrayOfOperand 1
	u8 au8Operand2[OPERANDS_SIZE];             //ArrayOfOperand 2
	u8 u8Sign;                                 //Operation Sign
	u8 u8NumberOfDigits1 = 0;                  //Number Of Digits For Operand1
    24ac:	19 86       	std	Y+9, r1	; 0x09
	u8 u8NumberOfDigits2 = 0;                  //Number Of Digits For Operand1
    24ae:	18 86       	std	Y+8, r1	; 0x08
	u8 u8EqFlag  = 0;                          //Flag To avoid Write On LCDScreen After Press '=' Before press 'c'
    24b0:	1f 82       	std	Y+7, r1	; 0x07
 	u8 u8ConFlag = 0;                          //Flag To Choose Write KeyPressed Value In Op1 Or OP2 Array
    24b2:	1e 82       	std	Y+6, r1	; 0x06
	u32 u32Result;                             //Result Of Operation

	/* DIO Initialization */
	/******************LCD*********************/
	/* LCD DATA PORT */
	DIO_voidSetPortDir(DIO_PORTC , DIO_PORT_OUTPUT);
    24b4:	82 e0       	ldi	r24, 0x02	; 2
    24b6:	6f ef       	ldi	r22, 0xFF	; 255
    24b8:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_voidSetPortDir>
	/* LCD CONTROL PORT */
	DIO_voidSetPinDir(DIO_PORTD,DIO_PIN0,DIO_OUTPUT);
    24bc:	83 e0       	ldi	r24, 0x03	; 3
    24be:	60 e0       	ldi	r22, 0x00	; 0
    24c0:	41 e0       	ldi	r20, 0x01	; 1
    24c2:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_voidSetPinDir>
	DIO_voidSetPinDir(DIO_PORTD,DIO_PIN1,DIO_OUTPUT);
    24c6:	83 e0       	ldi	r24, 0x03	; 3
    24c8:	61 e0       	ldi	r22, 0x01	; 1
    24ca:	41 e0       	ldi	r20, 0x01	; 1
    24cc:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_voidSetPinDir>
	DIO_voidSetPinDir(DIO_PORTD,DIO_PIN2,DIO_OUTPUT);
    24d0:	83 e0       	ldi	r24, 0x03	; 3
    24d2:	62 e0       	ldi	r22, 0x02	; 2
    24d4:	41 e0       	ldi	r20, 0x01	; 1
    24d6:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_voidSetPinDir>
	/****************KEYPAD******************/
	/* KPD ROWS & COLUMNS PORT */
	DIO_voidSetPinDir(DIO_PORTA,DIO_PIN0,DIO_OUTPUT);
    24da:	80 e0       	ldi	r24, 0x00	; 0
    24dc:	60 e0       	ldi	r22, 0x00	; 0
    24de:	41 e0       	ldi	r20, 0x01	; 1
    24e0:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_voidSetPinDir>
	DIO_voidSetPinDir(DIO_PORTA,DIO_PIN1,DIO_OUTPUT);
    24e4:	80 e0       	ldi	r24, 0x00	; 0
    24e6:	61 e0       	ldi	r22, 0x01	; 1
    24e8:	41 e0       	ldi	r20, 0x01	; 1
    24ea:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_voidSetPinDir>
	DIO_voidSetPinDir(DIO_PORTA,DIO_PIN2,DIO_OUTPUT);
    24ee:	80 e0       	ldi	r24, 0x00	; 0
    24f0:	62 e0       	ldi	r22, 0x02	; 2
    24f2:	41 e0       	ldi	r20, 0x01	; 1
    24f4:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_voidSetPinDir>
	DIO_voidSetPinDir(DIO_PORTA,DIO_PIN3,DIO_OUTPUT);
    24f8:	80 e0       	ldi	r24, 0x00	; 0
    24fa:	63 e0       	ldi	r22, 0x03	; 3
    24fc:	41 e0       	ldi	r20, 0x01	; 1
    24fe:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_voidSetPinDir>
	DIO_voidSetPinDir(DIO_PORTA,DIO_PIN4,DIO_INPUT);
    2502:	80 e0       	ldi	r24, 0x00	; 0
    2504:	64 e0       	ldi	r22, 0x04	; 4
    2506:	40 e0       	ldi	r20, 0x00	; 0
    2508:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_voidSetPinDir>
	DIO_voidSetPinDir(DIO_PORTA,DIO_PIN5,DIO_INPUT);
    250c:	80 e0       	ldi	r24, 0x00	; 0
    250e:	65 e0       	ldi	r22, 0x05	; 5
    2510:	40 e0       	ldi	r20, 0x00	; 0
    2512:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_voidSetPinDir>
	DIO_voidSetPinDir(DIO_PORTA,DIO_PIN6,DIO_INPUT);
    2516:	80 e0       	ldi	r24, 0x00	; 0
    2518:	66 e0       	ldi	r22, 0x06	; 6
    251a:	40 e0       	ldi	r20, 0x00	; 0
    251c:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_voidSetPinDir>
	DIO_voidSetPinDir(DIO_PORTA,DIO_PIN7,DIO_INPUT);
    2520:	80 e0       	ldi	r24, 0x00	; 0
    2522:	67 e0       	ldi	r22, 0x07	; 7
    2524:	40 e0       	ldi	r20, 0x00	; 0
    2526:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_voidSetPinDir>
	DIO_voidSetPortVal(DIO_PORTA , DIO_PORT_HIGH);  // set pull up */
    252a:	80 e0       	ldi	r24, 0x00	; 0
    252c:	6f ef       	ldi	r22, 0xFF	; 255
    252e:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_voidSetPortVal>

	/* LCD Initialization */
	LCD_voidInit();
    2532:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <LCD_voidInit>
	LCD_voidClearDisplay();
    2536:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <LCD_voidClearDisplay>

	/* LOOP */
	while(1)
	{
		u8KeyPressed = KPD_u8GetKeyPressed();
    253a:	0e 94 17 0a 	call	0x142e	; 0x142e <KPD_u8GetKeyPressed>
    253e:	8d 83       	std	Y+5, r24	; 0x05
		if(u8KeyPressed !=NULL)
    2540:	8d 81       	ldd	r24, Y+5	; 0x05
    2542:	88 23       	and	r24, r24
    2544:	d1 f3       	breq	.-12     	; 0x253a <main+0xa4>
		{
			/*print key pressed on LCD until Press '=' */
			if(u8EqFlag == 0)
    2546:	8f 81       	ldd	r24, Y+7	; 0x07
    2548:	88 23       	and	r24, r24
    254a:	19 f4       	brne	.+6      	; 0x2552 <main+0xbc>
			{
				LCD_voidSendData(u8KeyPressed);
    254c:	8d 81       	ldd	r24, Y+5	; 0x05
    254e:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <LCD_voidSendData>
			}
			if((u8KeyPressed == '=')||(u8KeyPressed == 'c'))
    2552:	8d 81       	ldd	r24, Y+5	; 0x05
    2554:	8d 33       	cpi	r24, 0x3D	; 61
    2556:	21 f0       	breq	.+8      	; 0x2560 <main+0xca>
    2558:	8d 81       	ldd	r24, Y+5	; 0x05
    255a:	83 36       	cpi	r24, 0x63	; 99
    255c:	09 f0       	breq	.+2      	; 0x2560 <main+0xca>
    255e:	62 c0       	rjmp	.+196    	; 0x2624 <main+0x18e>
			{
				switch(u8KeyPressed)
    2560:	8d 81       	ldd	r24, Y+5	; 0x05
    2562:	28 2f       	mov	r18, r24
    2564:	30 e0       	ldi	r19, 0x00	; 0
    2566:	38 a3       	std	Y+32, r19	; 0x20
    2568:	2f 8f       	std	Y+31, r18	; 0x1f
    256a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    256c:	98 a1       	ldd	r25, Y+32	; 0x20
    256e:	8d 33       	cpi	r24, 0x3D	; 61
    2570:	91 05       	cpc	r25, r1
    2572:	39 f0       	breq	.+14     	; 0x2582 <main+0xec>
    2574:	2f 8d       	ldd	r18, Y+31	; 0x1f
    2576:	38 a1       	ldd	r19, Y+32	; 0x20
    2578:	23 36       	cpi	r18, 0x63	; 99
    257a:	31 05       	cpc	r19, r1
    257c:	09 f4       	brne	.+2      	; 0x2580 <main+0xea>
    257e:	47 c0       	rjmp	.+142    	; 0x260e <main+0x178>
    2580:	dc cf       	rjmp	.-72     	; 0x253a <main+0xa4>
				{
				case '=':
					u8EqFlag = 1;
    2582:	81 e0       	ldi	r24, 0x01	; 1
    2584:	8f 83       	std	Y+7, r24	; 0x07
					/* Special cases */
					/* Division by 0 */
					if ((u8Sign == '/') && (u8ConFlag == 1) && (u8NumberOfDigits2 == 1) && (au8Operand2[0] == '0'))
    2586:	8a 85       	ldd	r24, Y+10	; 0x0a
    2588:	8f 32       	cpi	r24, 0x2F	; 47
    258a:	91 f4       	brne	.+36     	; 0x25b0 <main+0x11a>
    258c:	8e 81       	ldd	r24, Y+6	; 0x06
    258e:	81 30       	cpi	r24, 0x01	; 1
    2590:	79 f4       	brne	.+30     	; 0x25b0 <main+0x11a>
    2592:	88 85       	ldd	r24, Y+8	; 0x08
    2594:	81 30       	cpi	r24, 0x01	; 1
    2596:	61 f4       	brne	.+24     	; 0x25b0 <main+0x11a>
    2598:	8c 89       	ldd	r24, Y+20	; 0x14
    259a:	80 33       	cpi	r24, 0x30	; 48
    259c:	49 f4       	brne	.+18     	; 0x25b0 <main+0x11a>
					{
						LCD_voidSetPosition(LCD_LINE2,LCD_COLUM1);
    259e:	81 e0       	ldi	r24, 0x01	; 1
    25a0:	60 e0       	ldi	r22, 0x00	; 0
    25a2:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_voidSetPosition>
						LCD_voidSendString("Math Error");
    25a6:	81 e7       	ldi	r24, 0x71	; 113
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <LCD_voidSendString>
    25ae:	c5 cf       	rjmp	.-118    	; 0x253a <main+0xa4>
					}
					/* If the second operand  don't exist */
					else if((u8ConFlag == 1) && (u8NumberOfDigits2 == 0))
    25b0:	8e 81       	ldd	r24, Y+6	; 0x06
    25b2:	81 30       	cpi	r24, 0x01	; 1
    25b4:	61 f4       	brne	.+24     	; 0x25ce <main+0x138>
    25b6:	88 85       	ldd	r24, Y+8	; 0x08
    25b8:	88 23       	and	r24, r24
    25ba:	49 f4       	brne	.+18     	; 0x25ce <main+0x138>
					{
						LCD_voidSetPosition(LCD_LINE2,LCD_COLUM1);
    25bc:	81 e0       	ldi	r24, 0x01	; 1
    25be:	60 e0       	ldi	r22, 0x00	; 0
    25c0:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_voidSetPosition>
						LCD_voidSendString("Syntax Error");
    25c4:	8c e7       	ldi	r24, 0x7C	; 124
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <LCD_voidSendString>
    25cc:	b6 cf       	rjmp	.-148    	; 0x253a <main+0xa4>
					}
					/* Normal case */
					else
					{
						u32Result = CALC_u32GetResult(au8Operand1,au8Operand2,u8Sign,u8NumberOfDigits1,u8NumberOfDigits2);
    25ce:	ce 01       	movw	r24, r28
    25d0:	0b 96       	adiw	r24, 0x0b	; 11
    25d2:	9e 01       	movw	r18, r28
    25d4:	2c 5e       	subi	r18, 0xEC	; 236
    25d6:	3f 4f       	sbci	r19, 0xFF	; 255
    25d8:	b9 01       	movw	r22, r18
    25da:	4a 85       	ldd	r20, Y+10	; 0x0a
    25dc:	29 85       	ldd	r18, Y+9	; 0x09
    25de:	08 85       	ldd	r16, Y+8	; 0x08
    25e0:	0e 94 9b 05 	call	0xb36	; 0xb36 <CALC_u32GetResult>
    25e4:	dc 01       	movw	r26, r24
    25e6:	cb 01       	movw	r24, r22
    25e8:	89 83       	std	Y+1, r24	; 0x01
    25ea:	9a 83       	std	Y+2, r25	; 0x02
    25ec:	ab 83       	std	Y+3, r26	; 0x03
    25ee:	bc 83       	std	Y+4, r27	; 0x04
						LCD_voidSetPosition(LCD_LINE2,LCD_COLUM1);
    25f0:	81 e0       	ldi	r24, 0x01	; 1
    25f2:	60 e0       	ldi	r22, 0x00	; 0
    25f4:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_voidSetPosition>
						LCD_voidSendIntager(u32Result);
    25f8:	89 81       	ldd	r24, Y+1	; 0x01
    25fa:	9a 81       	ldd	r25, Y+2	; 0x02
    25fc:	ab 81       	ldd	r26, Y+3	; 0x03
    25fe:	bc 81       	ldd	r27, Y+4	; 0x04
    2600:	bc 01       	movw	r22, r24
    2602:	cd 01       	movw	r24, r26
    2604:	0e 94 b5 10 	call	0x216a	; 0x216a <LCD_voidSendIntager>
						u8EqFlag = 1;
    2608:	81 e0       	ldi	r24, 0x01	; 1
    260a:	8f 83       	std	Y+7, r24	; 0x07
    260c:	96 cf       	rjmp	.-212    	; 0x253a <main+0xa4>
					}
					break;
				case 'c':
					LCD_voidClearDisplay();
    260e:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <LCD_voidClearDisplay>
					LCD_voidSetPosition(LCD_LINE1,LCD_COLUM1);
    2612:	80 e0       	ldi	r24, 0x00	; 0
    2614:	60 e0       	ldi	r22, 0x00	; 0
    2616:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_voidSetPosition>
					u8ConFlag = 0;
    261a:	1e 82       	std	Y+6, r1	; 0x06
					u8NumberOfDigits1 = 0;
    261c:	19 86       	std	Y+9, r1	; 0x09
					u8NumberOfDigits2 = 0;
    261e:	18 86       	std	Y+8, r1	; 0x08
					u8EqFlag = 0;
    2620:	1f 82       	std	Y+7, r1	; 0x07
    2622:	8b cf       	rjmp	.-234    	; 0x253a <main+0xa4>
					break;
				}
			}
			else if((u8KeyPressed == '+')||(u8KeyPressed == '/')||(u8KeyPressed == '-')||(u8KeyPressed == 'x'))
    2624:	8d 81       	ldd	r24, Y+5	; 0x05
    2626:	8b 32       	cpi	r24, 0x2B	; 43
    2628:	49 f0       	breq	.+18     	; 0x263c <main+0x1a6>
    262a:	8d 81       	ldd	r24, Y+5	; 0x05
    262c:	8f 32       	cpi	r24, 0x2F	; 47
    262e:	31 f0       	breq	.+12     	; 0x263c <main+0x1a6>
    2630:	8d 81       	ldd	r24, Y+5	; 0x05
    2632:	8d 32       	cpi	r24, 0x2D	; 45
    2634:	19 f0       	breq	.+6      	; 0x263c <main+0x1a6>
    2636:	8d 81       	ldd	r24, Y+5	; 0x05
    2638:	88 37       	cpi	r24, 0x78	; 120
    263a:	29 f4       	brne	.+10     	; 0x2646 <main+0x1b0>
			{
				u8Sign = u8KeyPressed;
    263c:	8d 81       	ldd	r24, Y+5	; 0x05
    263e:	8a 87       	std	Y+10, r24	; 0x0a
				u8ConFlag = 1;
    2640:	81 e0       	ldi	r24, 0x01	; 1
    2642:	8e 83       	std	Y+6, r24	; 0x06
    2644:	7a cf       	rjmp	.-268    	; 0x253a <main+0xa4>
			}
			else
			{
				switch(u8ConFlag)
    2646:	8e 81       	ldd	r24, Y+6	; 0x06
    2648:	28 2f       	mov	r18, r24
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	3e 8f       	std	Y+30, r19	; 0x1e
    264e:	2d 8f       	std	Y+29, r18	; 0x1d
    2650:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2652:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2654:	00 97       	sbiw	r24, 0x00	; 0
    2656:	31 f0       	breq	.+12     	; 0x2664 <main+0x1ce>
    2658:	2d 8d       	ldd	r18, Y+29	; 0x1d
    265a:	3e 8d       	ldd	r19, Y+30	; 0x1e
    265c:	21 30       	cpi	r18, 0x01	; 1
    265e:	31 05       	cpc	r19, r1
    2660:	79 f0       	breq	.+30     	; 0x2680 <main+0x1ea>
    2662:	6b cf       	rjmp	.-298    	; 0x253a <main+0xa4>
				{
				case 0: au8Operand1[u8NumberOfDigits1] = u8KeyPressed; u8NumberOfDigits1 ++; break;
    2664:	89 85       	ldd	r24, Y+9	; 0x09
    2666:	28 2f       	mov	r18, r24
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	ce 01       	movw	r24, r28
    266c:	0b 96       	adiw	r24, 0x0b	; 11
    266e:	fc 01       	movw	r30, r24
    2670:	e2 0f       	add	r30, r18
    2672:	f3 1f       	adc	r31, r19
    2674:	8d 81       	ldd	r24, Y+5	; 0x05
    2676:	80 83       	st	Z, r24
    2678:	89 85       	ldd	r24, Y+9	; 0x09
    267a:	8f 5f       	subi	r24, 0xFF	; 255
    267c:	89 87       	std	Y+9, r24	; 0x09
    267e:	5d cf       	rjmp	.-326    	; 0x253a <main+0xa4>
				case 1: au8Operand2[u8NumberOfDigits2] = u8KeyPressed; u8NumberOfDigits2 ++; break;
    2680:	88 85       	ldd	r24, Y+8	; 0x08
    2682:	28 2f       	mov	r18, r24
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	ce 01       	movw	r24, r28
    2688:	44 96       	adiw	r24, 0x14	; 20
    268a:	fc 01       	movw	r30, r24
    268c:	e2 0f       	add	r30, r18
    268e:	f3 1f       	adc	r31, r19
    2690:	8d 81       	ldd	r24, Y+5	; 0x05
    2692:	80 83       	st	Z, r24
    2694:	88 85       	ldd	r24, Y+8	; 0x08
    2696:	8f 5f       	subi	r24, 0xFF	; 255
    2698:	88 87       	std	Y+8, r24	; 0x08
    269a:	4f cf       	rjmp	.-354    	; 0x253a <main+0xa4>

0000269c <__mulsi3>:
    269c:	62 9f       	mul	r22, r18
    269e:	d0 01       	movw	r26, r0
    26a0:	73 9f       	mul	r23, r19
    26a2:	f0 01       	movw	r30, r0
    26a4:	82 9f       	mul	r24, r18
    26a6:	e0 0d       	add	r30, r0
    26a8:	f1 1d       	adc	r31, r1
    26aa:	64 9f       	mul	r22, r20
    26ac:	e0 0d       	add	r30, r0
    26ae:	f1 1d       	adc	r31, r1
    26b0:	92 9f       	mul	r25, r18
    26b2:	f0 0d       	add	r31, r0
    26b4:	83 9f       	mul	r24, r19
    26b6:	f0 0d       	add	r31, r0
    26b8:	74 9f       	mul	r23, r20
    26ba:	f0 0d       	add	r31, r0
    26bc:	65 9f       	mul	r22, r21
    26be:	f0 0d       	add	r31, r0
    26c0:	99 27       	eor	r25, r25
    26c2:	72 9f       	mul	r23, r18
    26c4:	b0 0d       	add	r27, r0
    26c6:	e1 1d       	adc	r30, r1
    26c8:	f9 1f       	adc	r31, r25
    26ca:	63 9f       	mul	r22, r19
    26cc:	b0 0d       	add	r27, r0
    26ce:	e1 1d       	adc	r30, r1
    26d0:	f9 1f       	adc	r31, r25
    26d2:	bd 01       	movw	r22, r26
    26d4:	cf 01       	movw	r24, r30
    26d6:	11 24       	eor	r1, r1
    26d8:	08 95       	ret

000026da <__udivmodsi4>:
    26da:	a1 e2       	ldi	r26, 0x21	; 33
    26dc:	1a 2e       	mov	r1, r26
    26de:	aa 1b       	sub	r26, r26
    26e0:	bb 1b       	sub	r27, r27
    26e2:	fd 01       	movw	r30, r26
    26e4:	0d c0       	rjmp	.+26     	; 0x2700 <__udivmodsi4_ep>

000026e6 <__udivmodsi4_loop>:
    26e6:	aa 1f       	adc	r26, r26
    26e8:	bb 1f       	adc	r27, r27
    26ea:	ee 1f       	adc	r30, r30
    26ec:	ff 1f       	adc	r31, r31
    26ee:	a2 17       	cp	r26, r18
    26f0:	b3 07       	cpc	r27, r19
    26f2:	e4 07       	cpc	r30, r20
    26f4:	f5 07       	cpc	r31, r21
    26f6:	20 f0       	brcs	.+8      	; 0x2700 <__udivmodsi4_ep>
    26f8:	a2 1b       	sub	r26, r18
    26fa:	b3 0b       	sbc	r27, r19
    26fc:	e4 0b       	sbc	r30, r20
    26fe:	f5 0b       	sbc	r31, r21

00002700 <__udivmodsi4_ep>:
    2700:	66 1f       	adc	r22, r22
    2702:	77 1f       	adc	r23, r23
    2704:	88 1f       	adc	r24, r24
    2706:	99 1f       	adc	r25, r25
    2708:	1a 94       	dec	r1
    270a:	69 f7       	brne	.-38     	; 0x26e6 <__udivmodsi4_loop>
    270c:	60 95       	com	r22
    270e:	70 95       	com	r23
    2710:	80 95       	com	r24
    2712:	90 95       	com	r25
    2714:	9b 01       	movw	r18, r22
    2716:	ac 01       	movw	r20, r24
    2718:	bd 01       	movw	r22, r26
    271a:	cf 01       	movw	r24, r30
    271c:	08 95       	ret

0000271e <__prologue_saves__>:
    271e:	2f 92       	push	r2
    2720:	3f 92       	push	r3
    2722:	4f 92       	push	r4
    2724:	5f 92       	push	r5
    2726:	6f 92       	push	r6
    2728:	7f 92       	push	r7
    272a:	8f 92       	push	r8
    272c:	9f 92       	push	r9
    272e:	af 92       	push	r10
    2730:	bf 92       	push	r11
    2732:	cf 92       	push	r12
    2734:	df 92       	push	r13
    2736:	ef 92       	push	r14
    2738:	ff 92       	push	r15
    273a:	0f 93       	push	r16
    273c:	1f 93       	push	r17
    273e:	cf 93       	push	r28
    2740:	df 93       	push	r29
    2742:	cd b7       	in	r28, 0x3d	; 61
    2744:	de b7       	in	r29, 0x3e	; 62
    2746:	ca 1b       	sub	r28, r26
    2748:	db 0b       	sbc	r29, r27
    274a:	0f b6       	in	r0, 0x3f	; 63
    274c:	f8 94       	cli
    274e:	de bf       	out	0x3e, r29	; 62
    2750:	0f be       	out	0x3f, r0	; 63
    2752:	cd bf       	out	0x3d, r28	; 61
    2754:	09 94       	ijmp

00002756 <__epilogue_restores__>:
    2756:	2a 88       	ldd	r2, Y+18	; 0x12
    2758:	39 88       	ldd	r3, Y+17	; 0x11
    275a:	48 88       	ldd	r4, Y+16	; 0x10
    275c:	5f 84       	ldd	r5, Y+15	; 0x0f
    275e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2760:	7d 84       	ldd	r7, Y+13	; 0x0d
    2762:	8c 84       	ldd	r8, Y+12	; 0x0c
    2764:	9b 84       	ldd	r9, Y+11	; 0x0b
    2766:	aa 84       	ldd	r10, Y+10	; 0x0a
    2768:	b9 84       	ldd	r11, Y+9	; 0x09
    276a:	c8 84       	ldd	r12, Y+8	; 0x08
    276c:	df 80       	ldd	r13, Y+7	; 0x07
    276e:	ee 80       	ldd	r14, Y+6	; 0x06
    2770:	fd 80       	ldd	r15, Y+5	; 0x05
    2772:	0c 81       	ldd	r16, Y+4	; 0x04
    2774:	1b 81       	ldd	r17, Y+3	; 0x03
    2776:	aa 81       	ldd	r26, Y+2	; 0x02
    2778:	b9 81       	ldd	r27, Y+1	; 0x01
    277a:	ce 0f       	add	r28, r30
    277c:	d1 1d       	adc	r29, r1
    277e:	0f b6       	in	r0, 0x3f	; 63
    2780:	f8 94       	cli
    2782:	de bf       	out	0x3e, r29	; 62
    2784:	0f be       	out	0x3f, r0	; 63
    2786:	cd bf       	out	0x3d, r28	; 61
    2788:	ed 01       	movw	r28, r26
    278a:	08 95       	ret

0000278c <_exit>:
    278c:	f8 94       	cli

0000278e <__stop_program>:
    278e:	ff cf       	rjmp	.-2      	; 0x278e <__stop_program>
